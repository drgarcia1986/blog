<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Diego Garcia</title><link href="http://www.diego-garcia.info/" rel="alternate"></link><link href="http://www.diego-garcia.info/atom.xml" rel="self"></link><id>http://www.diego-garcia.info/</id><updated>2016-03-10T10:00:00-03:00</updated><entry><title>Usando o comando :substitute para converter tags LaTeX para Markdown</title><link href="http://www.diego-garcia.info/2016/03/10/usando-o-comando-substitute-para-converter-tags-latex-em-markdown/" rel="alternate"></link><published>2016-03-10T10:00:00-03:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2016-03-10:2016/03/10/usando-o-comando-substitute-para-converter-tags-latex-em-markdown/</id><summary type="html">&lt;p&gt;Recentemente decidi que iria ajudar o brother &lt;a href="http://cassiobotaro.github.io/"&gt;Cássio Botaro&lt;/a&gt; na nobre tarefa de migrar o clássico &lt;strong&gt;vimbook&lt;/strong&gt;
para o &lt;a href="https://www.gitbook.com/"&gt;gitbook&lt;/a&gt; (você também pode ajudar acessando o &lt;a href="https://github.com/cassiobotaro/vimbook"&gt;repositório do projeto&lt;/a&gt;).
Porém a versão anterior foi feita utilizando &lt;code&gt;LaTeX&lt;/code&gt;, enquanto que a nova, necessita ser feita em &lt;code&gt;markdown&lt;/code&gt;.
Eu poderia simplesmente substituir manualmente todas as tags &lt;em&gt;LaTeX&lt;/em&gt; por tags markdown, mas, sou muito preguiçoso pra isso.&lt;/p&gt;


&lt;h3&gt;O que foi preciso fazer&lt;/h3&gt;
&lt;p&gt;Escolhi um capítulo para converter e precisava além de converter, dividir os "títulos" (ou sessões) do capítulo em arquivos separados.
O texto no geral não tem diferenças, o que muda porém, são as tags de formatação de texto, como por exemplo, títulos, ênfase, links, etc.
Sendo assim, eu basicamente precisava copiar as sessões para novos arquivos e substituir as tags &lt;em&gt;LaTeX&lt;/em&gt; por tags &lt;em&gt;markdown&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Substituir as tag &lt;em&gt;LaTeX&lt;/em&gt; de forma manual seria algo extremamente tedioso e me levaria horas e mais horas.
Mas como você deve imaginar, uso o &lt;code&gt;VIM&lt;/code&gt; e como já disse, sou preguiçoso, então fui atrás de uma solução mais criativa.&lt;/p&gt;
&lt;h3&gt;O Comando :substitute&lt;/h3&gt;
&lt;p&gt;O Vim possui o comando &lt;code&gt;:substitute&lt;/code&gt; (abreviado como &lt;code&gt;:s&lt;/code&gt;) que funciona como um &lt;em&gt;"procurar &amp;amp; substituir"&lt;/em&gt;.
Ele funciona da seguinte maneira, procura por um padrão e caso encontre um texto que case com esse padrão, substitue por outro.
A syntax do comando &lt;em&gt;:substituite&lt;/em&gt; é a seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;[range]s[ubstitute]&lt;span class="sr"&gt;/{pattern}/&lt;/span&gt;{string}/[flags] [count]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por exemplo, no texto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Use Python2 e sua vida será melhor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o cursor na linha onde o texto se encontra, podemos aplicar o seguinte comando de substituição:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;s&lt;span class="sr"&gt;/Python2/&lt;/span&gt;Python3/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviamente o resultado será:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Use Python3 e sua vida será melhor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simples não? Por padrão, se não especificarmos o &lt;code&gt;range&lt;/code&gt; de atuação, o comando &lt;em&gt;:substitute&lt;/em&gt; só terá efeito na linha corrente,
porém, para realizar a busca em todo o arquivo basta utilizar o &lt;em&gt;range&lt;/em&gt; &lt;code&gt;%&lt;/code&gt; (que significa &lt;code&gt;1,$&lt;/code&gt;, ou seja, do início ao fim do arquivo corrente):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%s&lt;span class="sr"&gt;/Python2/&lt;/span&gt;Python3/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Outro detalhe é que, da forma como está o comando, somente a primeira ocorrência do texto &lt;em&gt;Python2&lt;/em&gt; seria substituída.
Se a intenção for substituir todas as ocorrências do texto, é possível utilizar a &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;g&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;s&lt;span class="sr"&gt;/Python2/&lt;/span&gt;Python3/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para saber mais opções e formas de usar o comando &lt;em&gt;:substitute&lt;/em&gt;, veja o &lt;em&gt;help&lt;/em&gt; através do comando &lt;code&gt;:help :substitute&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Utilizando Regex no comando :substitute&lt;/h3&gt;
&lt;p&gt;É possível utilizar &lt;em&gt;expressões regulares&lt;/em&gt; no comando &lt;em&gt;:substitute&lt;/em&gt; do Vim, o que significa que o céu é o limite.
Seguindo o exemplo anterior, poderíamos fazer a substituição utilizando uma regex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;s&lt;span class="sr"&gt;/Python[1-2]\.\?[1-7]\?/&lt;/span&gt;Python3/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dessa forma, substituiria não só o texto &lt;em&gt;Python2&lt;/em&gt;, como também, &lt;em&gt;Python2.7&lt;/em&gt;, &lt;em&gt;Python2.6&lt;/em&gt;, &lt;em&gt;Python1&lt;/em&gt;, etc.&lt;/p&gt;
&lt;h4&gt;O modificador &lt;em&gt;very magic&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Se você já está familiarizado com &lt;em&gt;expressões regulares&lt;/em&gt;, deve ter notado o &lt;em&gt;escape&lt;/em&gt; incomum no quantificador &lt;code&gt;?&lt;/code&gt;.
Isso ocorre pelo fato de que tantos os &lt;em&gt;meta-caracteres&lt;/em&gt;, quanto os &lt;em&gt;quantificadores&lt;/em&gt; e os indicadores de &lt;em&gt;grupo&lt;/em&gt; precisam ser escapados no comando &lt;em&gt;:substitute&lt;/em&gt;.
Porém, existe uma forma de evitar isso, usando o modificador &lt;code&gt;very magic&lt;/code&gt; (&lt;code&gt;\v&lt;/code&gt;).
Aplicando o modificador &lt;em&gt;very magic&lt;/em&gt; no comando anterior, ficaria desta forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;s&lt;span class="sr"&gt;/\vPython[1-2].?[1-7]?/&lt;/span&gt;Python3/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como essa é uma &lt;em&gt;regex&lt;/em&gt; simples, não é possível notar um ganho muito grande, porém, imagine uma regex um pouco mais complexa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;s&lt;span class="sr"&gt;/\d\{2,5\}\(\D\+\)\d\{1,3\}/&lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ativando o modificador &lt;em&gt;very magic&lt;/em&gt; ficaria dessa forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;s&lt;span class="sr"&gt;/\v\d{2,5}(\D+)\d{1,3}/&lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sendo assim, se você se perder nas barras de &lt;em&gt;escape&lt;/em&gt;, já sabe o que fazer.&lt;/p&gt;
&lt;h3&gt;Alguns truques de Regex que usei&lt;/h3&gt;
&lt;p&gt;Voltando ao desafio de migrar de &lt;em&gt;LaTeX&lt;/em&gt; para &lt;em&gt;markdown&lt;/em&gt;, para usar comandos e regex genéricas, eu teria que usar alguns artifícios, como &lt;code&gt;grupos&lt;/code&gt; e &lt;code&gt;retrovisores&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Grupos&lt;/h4&gt;
&lt;p&gt;Grupos em regex são definidos por &lt;em&gt;parênteses&lt;/em&gt; e servem a vários propósitos.
No caso em que estamos discutindo, a idéia é, recuperar valores de dentro de uma &lt;em&gt;tag&lt;/em&gt;.
Por exemplo, imagine o seguinte texto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Diego Garcia&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E imagine que a idéia seria recuperar apenas o conteúdo da tag &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; e separar entre primeiro e segundo nome (no caso &lt;em&gt;Diego&lt;/em&gt; e &lt;em&gt;Garcia&lt;/em&gt;), sendo assim, poderiamos usar a seguinte regex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;name&amp;gt;(\w+)\s(\w+)&amp;lt;\/name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O resultado seria:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Match&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;name&amp;gt;Diego&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Garcia&amp;lt;/name&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Group 1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Diego&amp;quot;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Group 2&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Garcia&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou seja, a frase inteira teria dado &lt;em&gt;match&lt;/em&gt;, porém, eu teria somente o texto &lt;em&gt;Diego&lt;/em&gt; no grupo 1 e o texto &lt;em&gt;Garcia&lt;/em&gt; no grupo 2 da minha regex.&lt;/p&gt;
&lt;h4&gt;Retrovisor&lt;/h4&gt;
&lt;p&gt;Quando utilizamos grupos em regex, podemos utilizar também &lt;em&gt;retrovisores&lt;/em&gt; para referenciarmos os valores recuperados nos grupos.
Os &lt;em&gt;retrovisores&lt;/em&gt; são representados por uma barra invertida e o número do grupo capturado, por exemplo &lt;code&gt;\1&lt;/code&gt;.
Usando o mesmo exemplo anterior junto ao comando &lt;em&gt;:substitute&lt;/em&gt; do vim, podemos por exemplo, separar esse texto em duas tags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s&lt;span class="sr"&gt;/&amp;lt;name&amp;gt;\(\w\+\)\s\(\w\+\)&amp;lt;\/name&amp;gt;/&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;\&lt;span class="sr"&gt;/first&amp;gt;&amp;lt;last&amp;gt;\2&amp;lt;\/last&amp;gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;o resultado do comando anterior seria:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;first&amp;gt;&lt;/span&gt;Diego&lt;span class="nt"&gt;&amp;lt;/first&amp;gt;&amp;lt;last&amp;gt;&lt;/span&gt;Garcia&lt;span class="nt"&gt;&amp;lt;/last&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Utilizando funções no comando :substitute&lt;/h3&gt;
&lt;p&gt;O Vim possui diversas funções builtin e elas podem ser usadas também no comando &lt;em&gt;:substitute&lt;/em&gt;.
Por exemplo, vamos imaginar uma simples conta matemática:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;10 + 3 = ?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos realizar esse cálculo utilizando a função &lt;code&gt;eval&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;echo eval&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10 + 3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;É possível também fazer simplesmente &lt;code&gt;:echo 10 + 3&lt;/code&gt; mas usaremos o &lt;strong&gt;eval&lt;/strong&gt; mais a frente&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Porém, imagine um arquivo com várias dessas contas, com o comando &lt;em&gt;:substitute&lt;/em&gt; e a função &lt;em&gt;eval&lt;/em&gt; é possível realizar essas contas em massa.
Para isso, primeiro precisamos capturar a expressão com uma regex e usar a função &lt;code&gt;submatch&lt;/code&gt; para recuperar esse valor capturado.
A função &lt;em&gt;submatch&lt;/em&gt; funciona como os retrovisores, retornando os grupos de captura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%s&lt;span class="sr"&gt;/^\([^=]*\)=\s*?/&lt;/span&gt;\&lt;span class="p"&gt;=&lt;/span&gt;submatch&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s1"&gt;&amp;#39;= &amp;#39;&lt;/span&gt; . eval&lt;span class="p"&gt;(&lt;/span&gt;submatch&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que estamos substituindo todo texto pela expressão matemática e seu resultado.
Para utilizar funções no comando &lt;em&gt;:substitute&lt;/em&gt; basta utilizar o caracter especial &lt;code&gt;=&lt;/code&gt;.
Outro detalhe importate é o fato de que para concatenar strings em funções no Vim, utilizasse o ponto (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Para mais informações sobre as funções builtin do Vim, veja o &lt;em&gt;help&lt;/em&gt; com o comando &lt;code&gt;:h functions&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Substituições&lt;/h3&gt;
&lt;p&gt;Chega de explicações e teorias, vamos as substituições práticas que fiz entre tags &lt;em&gt;LaTeX&lt;/em&gt; e tags &lt;em&gt;markdown&lt;/em&gt;.
Basicamente todas as substituições seguiram o mesmo padrão, um pattern que case com o texto,
um grupo (ou mais) envolvendo a informação que quero recuperar e o uso de retrovisores na forma como desejo substituir o texto.&lt;/p&gt;
&lt;h4&gt;Ênfase (ou itálico)&lt;/h4&gt;
&lt;p&gt;Em &lt;em&gt;LaTeX&lt;/em&gt; para dar ênfase a um texto, utilizamos o seguinte padrão:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\em&lt;/span&gt; Texto&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enquanto que, em markdown, podemos fazer desta forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*Texto*
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Também é possível utilizar o &lt;strong&gt;underscore&lt;/strong&gt;: &lt;code&gt;_Texto_&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sendo assim, para fazer essa conversão, eu poderia usar o padrão &lt;code&gt;{\\em ([^}]*)}&lt;/code&gt;, onde, após o texto &lt;strong&gt;{em&lt;/strong&gt; e o espaço, crio um grupo de captura que pegue
qualquer texto diferente do caracter &lt;strong&gt;}&lt;/strong&gt; (a lista negada &lt;code&gt;[^}]&lt;/code&gt;) em zero ou qualquer quantidade (quantificador &lt;code&gt;*&lt;/code&gt;) e para fechar, indico o caracter &lt;strong&gt;}&lt;/strong&gt;
para que também possa ser substituido na execução do comando.
Convertendo essa regex para o comando &lt;em&gt;:substitute&lt;/em&gt; do Vim, já utilizando o retrovisor correspondente ao grupo de captura
para formatar o texto no padrão markdown (&lt;code&gt;*\1*&lt;/code&gt;), teremos o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%s&lt;span class="sr"&gt;/{\\em \([^}]*\)}/&lt;/span&gt;*\&lt;span class="m"&gt;1&lt;/span&gt;*/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para surtir efeito em todo arquivo, adicionei o &lt;em&gt;range&lt;/em&gt; &lt;code&gt;%&lt;/code&gt; e para o comando ser aplicado a todas ocorrências que casarem com o padrão, utilizei a flag &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Typewrite typeface&lt;/h4&gt;
&lt;p&gt;Seguindo a mesma lógica usada para converter texto em ênfase, também foram convertidos textos com &lt;em&gt;typewrite/typeface&lt;/em&gt;, que usam a seguinte notação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\tt&lt;/span&gt; Texto&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A idéia era converter para texto em highlight, que no markdown, é feito da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`Texto`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como disse, a lógica do comando de substituição nesse caso é basicamente a mesma usada para os textos com ênfase, só substituindo o &lt;em&gt;\em&lt;/em&gt; por &lt;em&gt;\tt&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%s&lt;span class="sr"&gt;/{\\tt \([^}]*\)}/&lt;/span&gt;`\&lt;span class="m"&gt;1&lt;/span&gt;`/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O resto do comando segue o mesmo mecanismo.&lt;/p&gt;
&lt;h4&gt;SubSection&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;SubSection&lt;/em&gt; em &lt;em&gt;LaTeX&lt;/em&gt; são como &lt;em&gt;subtitulos&lt;/em&gt; de capítulos e usam a seguinte syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\subsection&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Texto&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No &lt;em&gt;vimbook&lt;/em&gt;, as &lt;em&gt;subsections&lt;/em&gt; foram convertidas para o terceiro nível de cabeçalho (ou &lt;code&gt;H3&lt;/code&gt; do &lt;em&gt;html&lt;/em&gt;), que em markdown usa a seguinte syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;### Texto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sem muito segredo para fazer a substituição, a regex &lt;code&gt;\\subsection{([^}]*)}&lt;/code&gt; já é o suficiente, pois básicamente estamos recuperando o conteúdo dentro
das chaves (&lt;code&gt;{}&lt;/code&gt;) através de um grupo de captura que recupera tudo que for diferente do caracter de fechamento de chaves (&lt;code&gt;([^}]*)&lt;/code&gt;).
Dessa forma, podemos usar esse conteúdo em um retrovisor e assim montar nosso subtítulo formatado em markdown (&lt;code&gt;### \1&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%s&lt;span class="sr"&gt;/\\subsection{\([^}]*\)}/&lt;/span&gt;### \&lt;span class="m"&gt;1&lt;/span&gt;/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Devido ao uso massivo de &lt;code&gt;{}&lt;/code&gt; nas regex, optei por não usar o modificador &lt;em&gt;very magic&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Link&lt;/h4&gt;
&lt;p&gt;Links em &lt;em&gt;LaTeX&lt;/em&gt; são ligeiramente parecidos com markdown, você define o link e um texto de exibição desse link, utilizando a seguinte notação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\href&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;http://link.com&lt;span class="nb"&gt;}{&lt;/span&gt;texto&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em markdown é um pouco mais simples e invertido, primeiro se é definido o texto para depois definir o link:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[texto](http://link.com)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para realizar essa conversão serão necessários dois grupos de captura, um para o &lt;em&gt;link&lt;/em&gt; e outro para o &lt;em&gt;texto&lt;/em&gt;.
A regex &lt;code&gt;\\href{([^}]*)}{([^}]*)}&lt;/code&gt; já da conta do recado.
Apesar de ser um pouco grande, não tem segredo, note que repeti o mesmo mecanismo das outras regex, grupos de captura que pegam tudo que não for o
caracter de fechamento do trecho de interesse (que em todos os casos, consiste no fechamento de chaves &lt;strong&gt;}&lt;/strong&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%s&lt;span class="sr"&gt;/\\href{\([^}]*\)}{\([^}]*\)}/&lt;/span&gt;[\&lt;span class="m"&gt;2&lt;/span&gt;]&lt;span class="p"&gt;(&lt;/span&gt;\&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No padrão da substituição, basta fazer referência aos retrovisores dos grupos capturados e formatar na notação de links markdown.&lt;/p&gt;
&lt;h4&gt;Section&lt;/h4&gt;
&lt;p&gt;Por fim, &lt;em&gt;section&lt;/em&gt; em &lt;em&gt;LaTeX&lt;/em&gt;, são títulos de capítulos e são descritos utilizando a seguinte notação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\section&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Texto&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No &lt;em&gt;vimbook&lt;/em&gt; cada &lt;em&gt;section&lt;/em&gt; basicamente se torna um arquivo separado e o título da &lt;em&gt;section&lt;/em&gt; se torna o &lt;em&gt;header&lt;/em&gt; da página, utilizando
o segundo nível de cabeçalho (&lt;code&gt;H2&lt;/code&gt; no &lt;em&gt;html&lt;/em&gt;).
Outro detalhe do &lt;em&gt;vimbook&lt;/em&gt; é que os cabeçalhos principais (&lt;code&gt;H1&lt;/code&gt; e &lt;code&gt;H2&lt;/code&gt;) utilizam o estilo &lt;strong&gt;setext&lt;/strong&gt; e os demais utilizam o padrão &lt;strong&gt;atx&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Veja mais sobre o estilo &lt;strong&gt;setext&lt;/strong&gt;, &lt;strong&gt;atx&lt;/strong&gt; e markdown em geral &lt;a href="https://daringfireball.net/projects/markdown/syntax"&gt;neste link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sendo assim, as &lt;em&gt;sections&lt;/em&gt; foram convertidas utilizando o seguinte padrão markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Texto
-----
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para recuperar o conteúdo referente ao título da section, podemos usa a regex &lt;code&gt;\\section{([^}]*)}&lt;/code&gt; que basicamente segue o mesmo padrão das outras que fizemos,
porém, nesse ponto temos um problema.
Como criar um comando genérico de substituição que coloque o caracter &lt;code&gt;-&lt;/code&gt; &lt;em&gt;n vezes&lt;/em&gt;,
de acordo com o tamanho do texto recuperado em um grupo de captura?
Simples, &lt;code&gt;functions&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Utilizaremos 3 funções:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;submatch&lt;/strong&gt;: semelhante ao retrovisor, retorna o valor de um grupo de captura.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;repeat&lt;/strong&gt;: retorna a repetição de uma string &lt;em&gt;n&lt;/em&gt; vezes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strlen&lt;/strong&gt;: retorna o tamanho de uma determinada string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Então precisamos, imprimir o texto capturado no primeiro grupo de captura (&lt;code&gt;submatch(1)&lt;/code&gt;), adicionar uma quebra de linha (&lt;code&gt;\r&lt;/code&gt;) e repetir o caracter
&lt;code&gt;-&lt;/code&gt; (&lt;code&gt;repeat('-', count)&lt;/code&gt;) tantas vezes quanto o tamanho do texto capturado (&lt;code&gt;strlen(submatch(1))&lt;/code&gt;).
No final, temos o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%s&lt;span class="sr"&gt;/\\section{\([^}]*\)}/&lt;/span&gt;\&lt;span class="p"&gt;=&lt;/span&gt;submatch&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; . &lt;span class="s2"&gt;&amp;quot;\r&amp;quot;&lt;/span&gt; . repeat&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;strlen&lt;span class="p"&gt;(&lt;/span&gt;submatch&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, com esses comandos toda a mágica acontece e não é preciso fazer diversar alterações repetitivas de forma manual.&lt;/p&gt;
&lt;h3&gt;Observação&lt;/h3&gt;
&lt;p&gt;Todos os recursos utilizados como &lt;em&gt;pattern&lt;/em&gt; nas pesquisas do comando &lt;em&gt;:substitute&lt;/em&gt;, também são válidos paras as busca simples do Vim (comando &lt;code&gt;/&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Alternativas&lt;/h3&gt;
&lt;p&gt;Todo esse processo poderia ter sido feito também utilizando o &lt;code&gt;SED&lt;/code&gt;, mas como outras edições foram necessárias, optei por fazer no Vim.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.gitbook.com/book/cassiobotaro/vimbook/details"&gt;Vimbook&lt;/a&gt;&lt;br&gt;
&lt;a href="http://vimdoc.sourceforge.net/htmldoc/change.html#:substitute"&gt;:help :substitute&lt;/a&gt;&lt;br&gt;
&lt;a href="http://vim.wikia.com/wiki/Search_and_replace"&gt;Search and Replace&lt;/a&gt;&lt;br&gt;
&lt;a href="http://vimdoc.sourceforge.net/htmldoc/eval.html#functions"&gt;:help functions&lt;/a&gt;&lt;br&gt;
&lt;a href="http://aurelio.net/regex/guia/"&gt;Expressões Regulares - Guia de Consulta Rápida&lt;/a&gt;&lt;/p&gt;</summary><category term="regex"></category><category term="vim"></category></entry><entry><title>MultiProcess em Python e o drible no GIL</title><link href="http://www.diego-garcia.info/2016/02/27/multi-process-em-python-e-fuga-do-gil/" rel="alternate"></link><published>2016-02-27T14:00:00-03:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2016-02-27:2016/02/27/multi-process-em-python-e-fuga-do-gil/</id><summary type="html">&lt;p&gt;Se você leu o post anterior sobre &lt;a href="/2016/02/18/threads-em-python-e-claro/"&gt;threads em python&lt;/a&gt;, muito provavelmente percebeu que o fato do &lt;code&gt;CPython&lt;/code&gt; ser otimizado para executar códigos &lt;em&gt;singlethread&lt;/em&gt;, não é um impeditivo para execução de tarefas paralelas com alto desempenho.
Porém, threads resolvem com maestria a execução de tarefas de &lt;strong&gt;I/O Bound&lt;/strong&gt; paralelas, mas quando o assunto é &lt;strong&gt;CPU Bound&lt;/strong&gt;, existe uma outra forma de ser efetivo no paralelismo com python.&lt;/p&gt;


&lt;h3&gt;Ainda o GIL&lt;/h3&gt;
&lt;p&gt;Assim como na execução singlethread, o &lt;code&gt;GIL&lt;/code&gt; &lt;strong&gt;NÃO&lt;/strong&gt; é liberado para tarefas do tipo &lt;em&gt;CPU Bound&lt;/em&gt; (ou seja, que dependem do uso massivo do processador e não de &lt;em&gt;I/O&lt;/em&gt;).
Mesmo que sejam criadas inúmeras threads para execução desse tipo de tarefa, o desempenho final não seria satisfatório, pelo contrário, o desempenho singlethread seria melhor do que o multithread.&lt;/p&gt;
&lt;p&gt;Porém, existe outra forma de lidar com esse problema, &lt;em&gt;processos&lt;/em&gt;.
Veja como isso funciona.&lt;/p&gt;
&lt;h3&gt;Encontrando os números primos&lt;/h3&gt;
&lt;p&gt;Para demonstrar o uso de multi processamento no python partiremos para um exemplo totalmente didático.
Faremos uma função que retorna uma lista com o números primos até um determinado número limite.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;primes_until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por exemplo, ao executar a função &lt;code&gt;primes_until&lt;/code&gt; passando o número &lt;code&gt;10&lt;/code&gt; como argumento, teremos o seguinte retorno:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;primes_until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Números primos são os números naturais que têm apenas dois divisores diferentes: o 1 e ele mesmo. &lt;a href="http://www.somatematica.com.br/fundam/primos.php"&gt;fonte&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Como essa função não exige muito poder computacional para ser executada, daremos uma &lt;em&gt;forçada na barra&lt;/em&gt; para que a execução fique lenta o suficiente a ponto de compensar o multi processamento.
Executaremos a função &lt;code&gt;primes_until&lt;/code&gt; &lt;em&gt;14&lt;/em&gt; vezes passando como número limite o range de &lt;em&gt;1000&lt;/em&gt; até &lt;em&gt;15000&lt;/em&gt; saltando de &lt;em&gt;1000&lt;/em&gt; em &lt;em&gt;1000&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TO_CALCULATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Execução Serial&lt;/h3&gt;
&lt;p&gt;Para realizar esses cálculos de forma serial, iremos iterar sobre o gerador &lt;code&gt;TO_CALCULATE&lt;/code&gt; que especificamos anteriormente e para cada número gerado iremos executar a função &lt;code&gt;primes_until&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_serial&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;primes_until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;TO_CALCULATE&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Como escrevo esses exemplos baseados no Python 3 a função built-in &lt;code&gt;range&lt;/code&gt; se tornou um gerador. Para utiliza-la como gerador no Python 2 utilize a função &lt;code&gt;xrange&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Execução multiprocess&lt;/h3&gt;
&lt;p&gt;Faremos o mesmo para realizar a execução multiprocess, porém, iremos distribuir cada execução em um processo diferente.
Assim como no post sobre &lt;a href="/2016/02/18/threads-em-python-e-claro/"&gt;threads em python&lt;/a&gt;, usaremos o módulo &lt;code&gt;concurrent.futures&lt;/code&gt;, com a diferença que desta vez utilizaremos o &lt;code&gt;ProcessPoolExecutor&lt;/code&gt; como nosso &lt;em&gt;executor&lt;/em&gt;.
Criaremos &lt;code&gt;Futures&lt;/code&gt; para cada execução (através do método &lt;code&gt;executor.submit()&lt;/code&gt;) e depois através do gerador &lt;code&gt;as_completed()&lt;/code&gt; iteraremos sobre as &lt;em&gt;futures&lt;/em&gt; (no caso nossos processos) que já estejam concluídas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;concurrent.futures&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;as_completed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ProcessPoolExecutor&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_multiprocess&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;waits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ProcessPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;waits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primes_until&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;TO_CALCULATE&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="n"&gt;waits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;as_completed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;waits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Caso não seja especificado o parâmetro &lt;code&gt;max_workers&lt;/code&gt; na criação da instancia do &lt;em&gt;ProcessPoolExecutor&lt;/em&gt;, por padrão o python assume como sendo o número de processadores da máquina.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ao realizar o &lt;code&gt;submit&lt;/code&gt; da função &lt;em&gt;primes_until&lt;/em&gt; para o nosso &lt;em&gt;ProcessPoolExecutor&lt;/em&gt;, um fork do processo principal é criado e a execução é feita nesse processo separado de forma paralela.
Dessa forma, conseguimos dividir a execução em processo separados (com o &lt;strong&gt;GIL&lt;/strong&gt; independente para cada um) e com isso não temos o efeito do &lt;em&gt;lock&lt;/em&gt; do GIL para cada requisição ao processador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep python3
diego-g+ &lt;span class="m"&gt;10074&lt;/span&gt;  6.0  0.2 &lt;span class="m"&gt;194720&lt;/span&gt; &lt;span class="m"&gt;12404&lt;/span&gt; pts/24   Sl+  13:01   0:00 python3 primes_numbers.py multiprocess
diego-g+ &lt;span class="m"&gt;10075&lt;/span&gt;  &lt;span class="m"&gt;121&lt;/span&gt;  0.1  &lt;span class="m"&gt;47256&lt;/span&gt;  &lt;span class="m"&gt;7936&lt;/span&gt; pts/24   R+   13:01   0:01 python3 primes_numbers.py multiprocess
diego-g+ &lt;span class="m"&gt;10076&lt;/span&gt;  &lt;span class="m"&gt;121&lt;/span&gt;  0.1  &lt;span class="m"&gt;47256&lt;/span&gt;  &lt;span class="m"&gt;7932&lt;/span&gt; pts/24   R+   13:01   0:01 python3 primes_numbers.py multiprocess
diego-g+ &lt;span class="m"&gt;10077&lt;/span&gt;  &lt;span class="m"&gt;119&lt;/span&gt;  0.1  &lt;span class="m"&gt;47256&lt;/span&gt;  &lt;span class="m"&gt;7940&lt;/span&gt; pts/24   R+   13:01   0:01 python3 primes_numbers.py multiprocess
diego-g+ &lt;span class="m"&gt;10078&lt;/span&gt;  &lt;span class="m"&gt;121&lt;/span&gt;  0.1  &lt;span class="m"&gt;47256&lt;/span&gt;  &lt;span class="m"&gt;7936&lt;/span&gt; pts/24   R+   13:01   0:01 python3 primes_numbers.py multiprocess
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Comparando a execução&lt;/h3&gt;
&lt;p&gt;Como disse no começo desse post, a função &lt;em&gt;primes_until&lt;/em&gt; não requer um grande poder de processamento para ser executada, mas como esse post tem fins didáticos, forçamos um conjudo de execuções pesadas a ponto de ficar muito demorado a excução singlethread.
Obviamente a execução multiprocess executa todos os calculos de uma só vez de forma paralela e sem intervenção do GIL (por se tratar de processos separados), com isso, conseguimos alcançar uma maior velocidade na execução.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Execução serial&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; python primes_numbers.py

real    0m6.366s
user    0m6.285s
sys     0m0.076s
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Execução multiprocess&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; python primes_numbers.py multiprocess

real    0m3.588s
user    0m12.186s
sys     0m0.055s
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Se trocassamos o executor de &lt;em&gt;ProcessPoolExecutor&lt;/em&gt; para &lt;em&gt;ThreadPoolExecutor&lt;/em&gt; teriamos sérios problemas de performance, devido ao bloqueio do GIL a ponto de a execução singlethread ter um desempenho melhor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Veja o código completo desse exemplo &lt;a href="https://gist.github.com/drgarcia1986/b70c895b4d9b825f367f"&gt;neste gist&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;O custo do uso de multi processamento&lt;/h3&gt;
&lt;p&gt;Apesar da execução multiprocess do exemplo anterior ter sido concluída em praticamente metade do tempo quando comparada a execução serial, não podemos encarar o multiprocess como a solução de todos os problemas em python.
Multiprocess não é uma bala de prata, muito pelo contrário, o seu uso deve ser muito ponderado.&lt;/p&gt;
&lt;p&gt;O multiprocess tem um custo no python que muitas vezes não paga o seu uso, como por exemplo, o tempo de &lt;code&gt;fork&lt;/code&gt; do processo, &lt;code&gt;serialização&lt;/code&gt;(via pickle) dos dados, &lt;code&gt;comunicação&lt;/code&gt; entre processos, etc.
A minha sugestão é, teste e compare antes de tomar uma decisão, se uma arquitetura multiprocess não for muito superior em termos de desempenho para o seu problema, não vale a pena manter essa complexidade.&lt;/p&gt;
&lt;h3&gt;Alternativas&lt;/h3&gt;
&lt;p&gt;Antes de pensar em uma solução baseada em paralelismo, você pode executar o seu código em outros interpretadores do python como por exemplo o &lt;a href="http://pypy.org/"&gt;pypy&lt;/a&gt; que promete ser um interpretador extremamente rápido e otimizado ou o &lt;a href="http://cython.org/"&gt;Cython&lt;/a&gt; que tem uma relação mais amigavel com o &lt;strong&gt;GIL&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://docs.python.org/3/library/concurrent.futures.html"&gt;Launching parallel tasks&lt;/a&gt;&lt;br&gt;&lt;/p&gt;</summary><category term="python"></category><category term="process"></category></entry><entry><title>Threads em Python? é claro!</title><link href="http://www.diego-garcia.info/2016/02/18/threads-em-python-e-claro/" rel="alternate"></link><published>2016-02-18T10:00:00-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2016-02-18:2016/02/18/threads-em-python-e-claro/</id><summary type="html">&lt;p&gt;Muito provavelmente você já deve ter ouvido a mesma lenda que me foi contada quando estava apreendendo python:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Python não é bom com threads&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Isso não é totalmente mentira, mas a questão é, threads só não serão efetivas com o python, se você não usar da forma correta.&lt;/p&gt;


&lt;h3&gt;O temível GIL&lt;/h3&gt;
&lt;p&gt;O &lt;code&gt;CPython&lt;/code&gt; (interpretador padrão do python) possui o &lt;strong&gt;G&lt;/strong&gt;lobal &lt;strong&gt;I&lt;/strong&gt;nterpreter &lt;strong&gt;L&lt;/strong&gt;ock, também conhecido como &lt;code&gt;GIL&lt;/code&gt;.
Um mecanismo (presente também em outras linguagens como o &lt;em&gt;Ruby&lt;/em&gt;) responsável por prevenir o uso de paralelismo, fazendo com que apenas uma thread seja executada no interpretador por vez.
Isso faz com que, mesmo criando inúmeras threads, o desempenho de uma rotina singlethread sejá melhor do que o desempenho de uma rotina multithread, já que internamente, apenas uma thread estará fazendo uso da cpu por vez (mesmo em um ambiente multicore).&lt;/p&gt;
&lt;p&gt;Existem vários beneficios e malefícios relacionados ao &lt;em&gt;GIL&lt;/em&gt; e talvez esse seja o motivo pelo qual muitas pessoas acreditam que em python, threads não são efetivas.&lt;/p&gt;
&lt;p&gt;Porém, o que nem todos sabem é que para operações de &lt;code&gt;I/O&lt;/code&gt; (network/socket e escrita em arquvios) o &lt;em&gt;GIL&lt;/em&gt; é liberado, ou seja, sempre que uma tarefa de &lt;em&gt;I/O&lt;/em&gt; for executada (por exemplo, consultar um servidor externo) o &lt;em&gt;GIL&lt;/em&gt; é liberado para que outro processo seja executado de forma paralela até essa primeira chamada retornar resultado.
Vamos ver isso na prática.&lt;/p&gt;
&lt;h3&gt;Problema do mundo real: multiplos requests http&lt;/h3&gt;
&lt;p&gt;Uma situação muito comum no dia a dia de um desenvolvedor é ter que lidar com multiplos requests externos na mesma rotina.
Usaremos um exemplo ficticio de uma aplicação de linha de comando que imprimi a cotação do real em relação a algumas moedas estrangeiras.
Essas cotações serão recuperadas do site &lt;a href="http://dolarhoje.com/"&gt;Dolar Hoje&lt;/a&gt; e sites similares.&lt;/p&gt;
&lt;h3&gt;Recuperando as cotações&lt;/h3&gt;
&lt;p&gt;Recuperaremos as cotações das seguintes modeas: &lt;code&gt;dolar&lt;/code&gt;, &lt;code&gt;euro&lt;/code&gt;, &lt;code&gt;libra&lt;/code&gt; e &lt;code&gt;peso&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CURRENCY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;dolar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://dolarhoje.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;euro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://eurohoje.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;libra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://librahoje.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;peso&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://pesohoje.com/&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como esses sites utilizam o mesmo formato, utilizaremos uma regex padrão para processa-los:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;r&amp;#39;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;nacional&amp;quot; value=&amp;quot;([^&amp;quot;]+)&amp;quot;/&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para recuperar essas cotações, faremos uma espécie de web crawler que fara um &lt;code&gt;GET&lt;/code&gt; na página e via &lt;code&gt;RegEx&lt;/code&gt; será recuperada a informação sobre a cotação monetária.
O método para realizar esse request é extremamente simples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exchange_rate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_REGEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um simples &lt;code&gt;get&lt;/code&gt; e &lt;code&gt;decode&lt;/code&gt; do conteúdo de uma url através da &lt;code&gt;urlib&lt;/code&gt; e a busca do padrão de uma regex através da função &lt;code&gt;search&lt;/code&gt; do pacote &lt;code&gt;re&lt;/code&gt; nativo do python para lidar com regex. &lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Utilizei a &lt;code&gt;urllib&lt;/code&gt; por ser uma biblioteca nativa do python, porém, para esse tipo de operação (e qualquer outro tipo de request sincrono) recomendo o uso da bibliotéca &lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Execução serial&lt;/h3&gt;
&lt;p&gt;Para recuperar a cotação de todas as urls listadas no dicionáro &lt;code&gt;CURRENCY&lt;/code&gt; de forma serial, basta iterar pelos &lt;code&gt;items&lt;/code&gt; (chave, valor) desse dicionário, executando a função &lt;code&gt;exchange_rate&lt;/code&gt; para cada um passando a url como parâmetro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;CURRENCY&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}: R${}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exchange_rate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cada iteração desse &lt;em&gt;for&lt;/em&gt; só será finalizada após a função &lt;code&gt;exchange_rate&lt;/code&gt; processar a url informada, ou seja, o tempo demorado será algo em torno do tempo do primeiro request vezes o número de items do dicionário.&lt;/p&gt;
&lt;h3&gt;Execução multithread&lt;/h3&gt;
&lt;p&gt;Para executar essa mesma rotina mas de forma paralela, utilizaremos a forma mais moderna de se trabalhar com concorrencia em python, o módulo &lt;code&gt;concurrent.futures&lt;/code&gt;.
Esse módulo permite através de um &lt;code&gt;Executor&lt;/code&gt; executar tarefas assincronas através de &lt;em&gt;threads&lt;/em&gt; ou &lt;em&gt;sub processos&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;O módulo &lt;em&gt;concurrent.futures&lt;/em&gt; está disponivel apartir da versão 3.2 do python, porém, possui o backport &lt;a href="https://pypi.python.org/pypi/futures"&gt;futures&lt;/a&gt; compatível com python 2.7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O módulo &lt;em&gt;concurrent.futures&lt;/em&gt; possuí 2 principais componentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Executor&lt;/code&gt;: Interface que possui métodos para executar rotinas de forma assincrona.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Future&lt;/code&gt;: Interface que encapsula a execução assincrona de uma rotina.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para executarmos nossa função &lt;code&gt;exchange_rate&lt;/code&gt; de forma assincrona deveremos executar o método &lt;code&gt;submit&lt;/code&gt; do &lt;em&gt;executor&lt;/em&gt; (em nosso caso, uma instância de &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;).
Esse método aceita como parâmetro a função que será executada de forma assincrona e seus &lt;code&gt;*args&lt;/code&gt; e &lt;code&gt;**kwargs&lt;/code&gt;, no nosso caso devemos passar a função &lt;em&gt;exchange_rate&lt;/em&gt; e a &lt;em&gt;url&lt;/em&gt;.
O método &lt;em&gt;submit&lt;/em&gt; retorna uma instância de &lt;em&gt;Future&lt;/em&gt; que encapsulara a execução assincrona da rotina.&lt;/p&gt;
&lt;p&gt;Em nosso problema, precisamos iniciar todos os requests e aguardar até que todos sejam concluídos, para que isso seja possível basta criar &lt;em&gt;futures&lt;/em&gt; dessas rotinas e processar as que forem concluídas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;concurrent.futures&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;as_completed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CURRENCY&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;waits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange_rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;CURRENCY&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;as_completed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;waits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;waits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}: R${}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O gerador &lt;code&gt;as_completed&lt;/code&gt; do módulo &lt;em&gt;concurrent.futures&lt;/em&gt; retorna as &lt;em&gt;futures&lt;/em&gt; que forem concluídas na ordem em que forem concluídas.
Após a &lt;em&gt;future&lt;/em&gt; estar concluída, basta recuperar seu resultado através do método &lt;code&gt;result()&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Repare que na criação do &lt;strong&gt;executor&lt;/strong&gt; foi necessário especificar o número de workers que serão utilizados para executar as rotinas assincronas, porém, na versão 3.5 do python esse parâmetro não é mais obrigatório e caso ele seja omitido, o python assume o número de processadores na máquina&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Comparando a execução&lt;/h3&gt;
&lt;p&gt;Apesar de o mesmo numero de requests externos estarem sendo executados em ambos os casos, a execução serial executa um request por vez, enquanto que a execução multithread executa todos os requests de uma só vez, de forma paralela (sem intervenção do &lt;em&gt;GIL&lt;/em&gt;) diminuindo assim o tempo de execução da aplicação de forma exponencial&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Execução serial&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; python multi_requests.py
libra: R&lt;span class="nv"&gt;$5&lt;/span&gt;,78
dolar: R&lt;span class="nv"&gt;$4&lt;/span&gt;,00
euro: R&lt;span class="nv"&gt;$4&lt;/span&gt;,47
peso: R&lt;span class="nv"&gt;$0&lt;/span&gt;,27

real    0m3.476s
user    0m0.129s
sys     0m0.004s
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Execução multithread&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; python multi_requests.py threads
dolar: R&lt;span class="nv"&gt;$4&lt;/span&gt;,00
euro: R&lt;span class="nv"&gt;$4&lt;/span&gt;,47
libra: R&lt;span class="nv"&gt;$5&lt;/span&gt;,78
peso: R&lt;span class="nv"&gt;$0&lt;/span&gt;,27

real    0m1.433s
user    0m0.122s
sys     0m0.025s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que a execução serial demorou em torno de &lt;strong&gt;3.47 segundos&lt;/strong&gt; contra &lt;strong&gt;1.43 segundos&lt;/strong&gt; da excução multithread.
Essa diferença tende a crescer de acordo com a quantidade de requests feitos.&lt;/p&gt;
&lt;p&gt;Veja o código completo desse exemplo &lt;a href="https://gist.github.com/drgarcia1986/2a5d283b0d279ea96c26"&gt;neste gist&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;Em resumo, toda vez que alguém enche a boca para me dizer &lt;em&gt;"python não é bom com threads"&lt;/em&gt; essa é a minha reação:&lt;/p&gt;
&lt;p&gt;(╯°□°）╯︵ ┻━┻&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://docs.python.org/3/library/concurrent.futures.html"&gt;Launching parallel tasks&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.dabeaz.com/python/UnderstandingGIL.pdf"&gt;Understanding the Python GIL&lt;/a&gt;&lt;br&gt;&lt;/p&gt;</summary><category term="python"></category><category term="threads"></category></entry><entry><title>Aumentando o Volume com o Audacity</title><link href="http://www.diego-garcia.info/2016/02/15/aumentando-o-volume-com-audacity/" rel="alternate"></link><published>2016-02-15T00:00:00-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2016-02-15:2016/02/15/aumentando-o-volume-com-audacity/</id><summary type="html">&lt;p&gt;Por mais de uma vez, me vi na necessida de editar arquivos de audio, seja para cotar, juntar, adicionar efeitos, volumes, etc.
Em todas as vezes, sempre fui salvo pelo &lt;strong&gt;Audacity&lt;/strong&gt;.&lt;/p&gt;


&lt;h3&gt;Audacity&lt;/h3&gt;
&lt;p&gt;O &lt;a href="http://www.audacityteam.org/"&gt;audacity&lt;/a&gt; é um software open source, cross-platform para gravação e edição de sons.
Com ele você pode fazer desde pequenas correções em arquivos de audio, até gravar e editar podcasts, converter diferentes formatos de audio, criar edições complexas, etc.
Dessa vez a minha missão era simples, converter do formato &lt;code&gt;aif&lt;/code&gt; para &lt;code&gt;mp3&lt;/code&gt; e aumentar o volume da faixa como um todo.&lt;/p&gt;
&lt;h3&gt;Aumentando o volume&lt;/h3&gt;
&lt;p&gt;Essa foi a primeira vez que precisei aumentar os volumes gerais de um arquivo de audio no &lt;em&gt;audacity&lt;/em&gt; e para minha surpresa foi algo muito simples, bastou selecionar toda a faixa (&lt;code&gt;Edit&lt;/code&gt; -&amp;gt; &lt;code&gt;Select&lt;/code&gt; -&amp;gt; &lt;code&gt;All&lt;/code&gt;) e aplicar o efeito &lt;code&gt;Amplify&lt;/code&gt;(&lt;code&gt;Effect&lt;/code&gt; -&amp;gt; &lt;code&gt;Amplify&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img alt="amplify" src="/images/audacity_amplify.png" /&gt;&lt;/p&gt;
&lt;p&gt;Apliquei o efeito em um nível que não distorcia o som e pronto, a faixa já estava muito mais alta em apenas poucos cliques.&lt;/p&gt;
&lt;h3&gt;Convertendo para mp3&lt;/h3&gt;
&lt;p&gt;Converter para outros formatos de audio é algo ainda mais trivial no &lt;em&gt;audacity&lt;/em&gt;, basta ir no menu &lt;code&gt;Export&lt;/code&gt; (&lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Export&lt;/code&gt;) e selecionar o nome e formato do arquivo desejado.&lt;/p&gt;
&lt;p&gt;Pronto, mais uma vez o audacity resolveu meus problemas com edição de som.&lt;/p&gt;</summary><category term="audacity"></category><category term="punk"></category><category term="music"></category></entry><entry><title>Migrando para o Pelican</title><link href="http://www.diego-garcia.info/2016/02/14/migrando-para-o-pelican/" rel="alternate"></link><published>2016-02-14T00:00:00-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2016-02-14:2016/02/14/migrando-para-o-pelican/</id><summary type="html">&lt;p&gt;Depois de um longo hiato, resolvi voltar a dar atenção a esse blog, porém, antes de voltar a escrever, ainda tinha algo que me incomodava bastante, a complexidade do &lt;a href="http://blog.getpelican.com/"&gt;jekyll&lt;/a&gt;.
Após contribuir com alguns posts no &lt;a href="http://pythonclub.com.br/"&gt;pythonclub&lt;/a&gt; descidi que iria migrar para o &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, pois, além de ser mais simples, o &lt;em&gt;Pelican&lt;/em&gt; é feito em python, o que me ajuda bastante em futuras customizações.
&lt;/p&gt;
&lt;h3&gt;O que é Pelican?&lt;/h3&gt;
&lt;p&gt;Assim como o &lt;em&gt;Jekyll&lt;/em&gt; o &lt;em&gt;Pelican&lt;/em&gt; é um gerador de sites estáticos simples que não requer um banco de dados ou uma lógica server-side complexa.
Com o pelican, no caso de blogs por exemplo, basta você escrever seus posts em arquivos no formato &lt;em&gt;markdown&lt;/em&gt; (ou &lt;em&gt;rst&lt;/em&gt; ou &lt;em&gt;AsciiDoc&lt;/em&gt;) em seu editor favorito e com apenas um comando simples, esses arquivos são convertidos em páginas html estáticas prontas para servir seu blog.&lt;/p&gt;
&lt;h3&gt;Como começar?&lt;/h3&gt;
&lt;p&gt;Começaremos instalando o Pelican, para isso, crie um virtualenv do python no diretório onde você irá criar seu blog e instale o pelican através o &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ pip install pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o &lt;em&gt;Pelican&lt;/em&gt; instalado, execute o comando &lt;code&gt;pelican-quickstart&lt;/code&gt; para criar um esqueleto básico do seu blog com o pelican:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse comando fará algumas perguntas básicas sobre seu blog, após respondê-las, seu blog está praticamente pronto :).&lt;/p&gt;
&lt;h3&gt;Como escrever posts?&lt;/h3&gt;
&lt;p&gt;Com a parte básica do &lt;em&gt;pelican&lt;/em&gt; já configurada, agora é hora de escrever um post.
O diretório padrão para o conteúdo a ser processado pelo pelican é o diretório &lt;code&gt;content&lt;/code&gt; dentro da raiz do diretório onde o comando &lt;code&gt;pelican-quickstart&lt;/code&gt; foi executado, sendo assim, basta criar seus posts nesse diretório.&lt;/p&gt;
&lt;h4&gt;Criando um "Hello World"&lt;/h4&gt;
&lt;p&gt;Não existem segredos na criação de um post com o pelican, basta criar arquivos no diretório &lt;code&gt;content&lt;/code&gt; e preencher um cabeçalho mínimo com alguns meta-dados do post como esse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Titulo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;formato&lt;/span&gt; &lt;span class="n"&gt;aaaa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="n"&gt;hh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Categoria&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sendo assim, nosso &lt;em&gt;Hello World&lt;/em&gt; ficaria da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;

&lt;span class="n"&gt;Meu&lt;/span&gt; &lt;span class="n"&gt;primeiro&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt; &lt;span class="n"&gt;direto&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Como gerar o conteúdo?&lt;/h3&gt;
&lt;p&gt;Gerar o conteúdo estático é a parte mais simples do trabalho, basta executar o comando &lt;code&gt;pelican "diretório"&lt;/code&gt; e todos arquivos do diretório em questão serão processados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ pelican content
Done: Processed &lt;span class="m"&gt;1&lt;/span&gt; articles, &lt;span class="m"&gt;0&lt;/span&gt; drafts, &lt;span class="m"&gt;0&lt;/span&gt; pages and &lt;span class="m"&gt;0&lt;/span&gt; hidden pages in 0.70 seconds.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse comando básicamente gera os arquivos estáticos no diretório &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Como vejo o blog no ar?&lt;/h3&gt;
&lt;p&gt;Agora que todo o conteúdo estático do seu blog já foi gerado, basta iniciar um servidor http no diretório &lt;code&gt;output&lt;/code&gt;.
Para isso, dentro do diretório &lt;em&gt;output&lt;/em&gt; basta executar o comando &lt;code&gt;python -m pelican.server&lt;/code&gt; e abrir o navegar em &lt;em&gt;http://localhost:8000&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hello-world" src="/images/pelican_hello_world.png" /&gt;&lt;/p&gt;
&lt;p&gt;Pronto, seu blog com o Pelican já está no ar =D.&lt;/p&gt;
&lt;h3&gt;Como mudar o tema padrão?&lt;/h3&gt;
&lt;p&gt;Mudar o tema que será utilizado para gerar o output estático é algo trivial no Pelican, basta você baixar o tema escolhido (você pode escolher alguns disponíveis, no reposítorio &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;) e alterar o tema na constante &lt;code&gt;THEME&lt;/code&gt; do arquivo &lt;code&gt;pelicanconf.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pelicanconf.py&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/diretório/do/tema`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lembrando que os tema são feitos utilizando o &lt;a href="http://jinja.pocoo.org/docs/dev/"&gt;Jinja2&lt;/a&gt; como engine de templates, sendo assim, é muito simples customizar os temas ou até mesmo criar um novo.&lt;/p&gt;
&lt;h3&gt;Como instalar plugins?&lt;/h3&gt;
&lt;p&gt;Outra tarefa trivial, basta baixar o plugin (você pode escolher alguns disponíveis no repositório &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;pelican-plugins&lt;/a&gt;) e alterar o arquivo &lt;code&gt;pelicanconf.py&lt;/code&gt; especificando o diretório dos plugins e quais plugins estão ativos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pelicanconf.py&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/diretório/dos/plugins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plugins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ativos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Como publicar usando o GitHub Pages?&lt;/h3&gt;
&lt;p&gt;Utilizo o &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; para publicar o conteúdo do blog.
No Jekyll bastava o comando &lt;code&gt;rake deploy&lt;/code&gt; e a mágica acontecia, no Pelican não é diferente, basta o comando &lt;code&gt;make github&lt;/code&gt; e o conteúdo estático (pasta &lt;em&gt;output&lt;/em&gt;) será commitado e enviado para o GitHub.
É possível automizar esse processo para sempre que houver um push no repositório o &lt;code&gt;travis&lt;/code&gt; gere o conteúdo estático e faça a atualização dos arquivos na branch do GitHub Pages, para mais informações de como configurar essa automação, recomendo a leitura do excelente artigo &lt;a href="http://df.python.org.br/blog/github-pages-com-pelican-e-travis-ci/"&gt;GitHub Pages com Pelican e Travis-CI&lt;/a&gt; do &lt;a href="http://df.python.org.br/"&gt;Grupy-DF&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Como foi a migração do Jekyll para o Pelican?&lt;/h3&gt;
&lt;p&gt;A migração do Jekyll para o Pelican foi algo extremamente simples, bastou copiar os posts do diretório &lt;code&gt;source/_post&lt;/code&gt; do jekyll para o diretório &lt;code&gt;content&lt;/code&gt; do pelican e alterar os metadados dos posts, por exemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Padrão do Jekyll&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;layout&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;post&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;title&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Use&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;o&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;cURL&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;date&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2014-12-13 01:04:33 -0200&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;comments&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;categories&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;curl&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Padrão do Pelican&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;cURL&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Curl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como decidi usar um tema novo (e não portar o que estava utilizando no jekyll) o resto foram ajustes simples.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br&gt;
&lt;a href="http://blog.getpelican.com/"&gt;Site Oficial&lt;/a&gt;&lt;br&gt;&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category></entry><entry><title>A armadilha dos argumentos com valores padrão</title><link href="http://www.diego-garcia.info/2015/06/07/a-armadilha-dos-argumentos-com-valores-default/" rel="alternate"></link><published>2015-06-07T11:00:00-03:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2015-06-07:2015/06/07/a-armadilha-dos-argumentos-com-valores-default/</id><summary type="html">&lt;p&gt;Algo muito comum em várias linguagens de programação é a possibilidade de definir &lt;em&gt;valores default&lt;/em&gt; (valores padrão) para argumentos de funções e métodos, tornando a utilização desses opcional.
Isso é ótimo, principalmente para manter retrocompatibilidade, porém, o python possui uma pequena armadilha que caso passe despercebida, pode causar sérios problemas, muitas vezes difíceis de serem detectados.
Essa armadilha ocorre quando usamos valores de tipos &lt;code&gt;mutáveis&lt;/code&gt; como valor default de argumentos.&lt;/p&gt;


&lt;h3&gt;O que são tipos mutáveis e imutáveis?&lt;/h3&gt;
&lt;p&gt;Segundo a &lt;a href="https://docs.python.org/3.4/reference/datamodel.html"&gt;documentação oficial do python&lt;/a&gt;, o valor de alguns objetos pode mudar, esses objetos que podem ter seu valor alterado após serem criados são chamados de mutáveis, enquanto que os objetos que não podem ter seus valores alterados após serem criados são chamados de imutáveis (simples assim).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tipos mutáveis&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Listas, Dicionários e tipos definidos pelo usuário.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tipos imutáveis&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Numeros, Strings e Tuplas.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apesar de serem imutáveis, a utilização de um valor mutável (uma lista por exemplo) dentro de uma tupla, pode causar o efeito &lt;em&gt;&lt;a href="http://pythonclub.com.br/tuplas-mutantes-em-python.html"&gt;tuplas mutáveis&lt;/a&gt;&lt;/em&gt;, onde visualmente o valor da tupla é alterado, mas por trás dos panos o valor da tupla não muda, o que muda é o valor do objeto pelo qual a tupla está se referenciando.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;A armadilha&lt;/h3&gt;
&lt;p&gt;Como disse no começo desse blogpost, é muito comum a utilização de valores default em agurmentos de funções e métodos, por essa razão, nos sentimos seguros em fazer algo desse tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Porém, levando esse exemplo em consideração, o que irá acontecer se invocarmos essa função 3 vezes?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sim, o valor do argumento &lt;code&gt;my_list&lt;/code&gt; mudou em cada vez que executamos a função sem passar algum valor para ele.&lt;/p&gt;
&lt;h3&gt;Por que isso acontece?&lt;/h3&gt;
&lt;p&gt;Isso acontece porque o python processa os valores default de cada argumentos de uma função (ou método) quando essa for definida, após esse processamento o valor é atribuido ao objeto da função.
Ou seja, por questões de optimização, seguindo nosso exemplo, o python não cria uma lista vazia para o argumento &lt;code&gt;my_list&lt;/code&gt; a cada vez que a função &lt;code&gt;my_function&lt;/code&gt; for invocada, ele reaproveita uma lista que foi criada no momento em que essa função foi importada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;([],)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;140634243738080&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;140634243738080&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;140634243738080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note que a identificação do argumento (no caso &lt;code&gt;my_list&lt;/code&gt;) não muda, mesmo executando a função várias vezes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Outro exemplo seria utilizar o resultado de funções como valores default de argumentos, por exemplo, uma função com um argumento que recebe como default o valor de &lt;code&gt;datetime.now()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;what_time_is_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;/%m/%Y %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O valor do argumento &lt;code&gt;dt&lt;/code&gt; sempre será o &lt;em&gt;datetime&lt;/em&gt; do momento em que o python carregou a função e não o &lt;em&gt;datetime&lt;/em&gt; de quando a função foi invocada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;what_time_is_it&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;what_time_is_it&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Isso também acontece com classes?&lt;/h3&gt;
&lt;p&gt;Sim e de uma forma ainda mais perigosa.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ListNumbers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim como no caso das funções, no exemplo acima o argumento &lt;code&gt;numbers&lt;/code&gt; é definido no momento em que o python importa a classe, ou seja, a cada nova instância da classe &lt;code&gt;ListNumbers&lt;/code&gt;, será aproveitada a mesma lista no argumento &lt;code&gt;numbers&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ListNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ListNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_numbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_numbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_numbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_numbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Por que isso não acontece com Strings?&lt;/h3&gt;
&lt;p&gt;Porque strings são &lt;code&gt;imutáveis&lt;/code&gt;, o que significa que a cada alteração de valor em uma variavel que armazena uma strings, o python cria uma nova instância para essa variável.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;140398402003832&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;140398402003872&lt;/span&gt;  &lt;span class="c1"&gt;# o penúltimo número muda :)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em argumentos com valores default, não é diferente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def my_function(my_str=&amp;#39;abc&amp;#39;):
    my_str += &amp;#39;d&amp;#39;
    print(my_str)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, sempre que for executado o &lt;code&gt;inplace add&lt;/code&gt; (&lt;code&gt;+=&lt;/code&gt;) será criada outra váriavel para &lt;code&gt;my_str&lt;/code&gt; sem alterar o valor default do argumento.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;abcd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;abcd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Como se proteger?&lt;/h3&gt;
&lt;p&gt;A maneira mais simples de evitar esse tipo de surpresa é utilizar um &lt;a href="http://en.wikipedia.org/wiki/Sentinel_value"&gt;valor sentinela&lt;/a&gt; como por exemplo &lt;code&gt;None&lt;/code&gt;, nos argumentos opcionais que esperam tipos mutáveis:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou, para deixar o código ainda mais elegante, podemos simplificar a condicional com um simples &lt;code&gt;or&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Obrigado &lt;a href="http://pythonclub.com.br/author/bruno-cezar-rocha.html"&gt;Bruno Rocha&lt;/a&gt; pela sugestão.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pronto, sem surpresas e sem armadilhas :).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Referências&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920032519.do"&gt;Fluent Python (Mutable types as parameter defaults: bad idea)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.quantifiedcode.com/python-anti-patterns/correctness/mutable_default_value_as_argument.html"&gt;Python Anti-Patterns (Using a mutable default value as an argument)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="anti-pattern"></category></entry><entry><title>Executando uma aplicação WSGI com Docker</title><link href="http://www.diego-garcia.info/2015/05/01/executando-uma-aplicacao-wsgi-com-docker/" rel="alternate"></link><published>2015-05-01T11:05:00-03:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2015-05-01:2015/05/01/executando-uma-aplicacao-wsgi-com-docker/</id><summary type="html">&lt;p&gt;Já sabemos um pouco sobre o Docker, como ele funciona e como podemos brincar com ele.
Porém, na prática, como podemos conteinerizar nossas aplicações de forma simples e com um bom desempenho?
Veremos nesse post uma &lt;em&gt;receita de bolo&lt;/em&gt; de como conteinerizar aplicações WSGI de forma simples com um molde que pode ser reaproveitado sempre que necessário.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Esse post é a continuação do post &lt;a href="/docker-por-onde-comecar.html"&gt;Docker, por onde começar&lt;/a&gt;, recomendo que faça a leitura do post inicial (caso ainda não tenha feito) antes de prosseguir.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;A aplicação de exemplo&lt;/h3&gt;
&lt;p&gt;A idéia aqui não é criar uma aplicação complexa e perder tempo explicando como essa aplicação funciona, mas sim, criar uma estrutura que pode servir de molde para outras aplicações que irão rodar em containers (ou não).
Sendo assim, iremos criar a estrutura básica de uma aplicação que poderá ser usada como base para qualquer outra aplicação, independente do Framework, desde que tenha suporte a WSGI.&lt;/p&gt;
&lt;h4&gt;O arquivo RUN.py&lt;/h4&gt;
&lt;p&gt;O que vai realmente importar para o nosso exemplo é o arquivo &lt;code&gt;run.py&lt;/code&gt;, nele iremos carregar e disponibilizar o &lt;code&gt;wsgi&lt;/code&gt; do nosso app.
Basicamente esse será o arquivo que deverá ser chamado quando quisermos colocar nossa aplicação no ar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;my_app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O arquivo &lt;code&gt;run.py&lt;/code&gt; é genérico, ou seja, funciona tanto para aplicações flask, bottle, falcon, etc.
Por exemplo, se estivessemos criando uma aplicação Flask, bastaria ter o seguinte código no arquivo &lt;code&gt;my_app.py&lt;/code&gt; (ou &lt;code&gt;my_app/__init__.py&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello from docker!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já uma aplicação bottle, poderia ser dessa maneira.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello from docker!&amp;#39;&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E assim por diante.
Como falei anteriormente, a idéia é não se aprofundar na aplicação, mas sim na arquitetura.&lt;/p&gt;
&lt;h4&gt;Gunicorn&lt;/h4&gt;
&lt;p&gt;O &lt;a href="http://gunicorn.org/"&gt;Gunicorn&lt;/a&gt; é um servidor HTTP dedicado que serve aplicações WSGI, como é o caso de aplicações desenvolvidas com &lt;em&gt;Flask&lt;/em&gt;, &lt;em&gt;Django&lt;/em&gt;, &lt;em&gt;Bootle&lt;/em&gt;, etc.
Com o gunicorn é possível por exemplo executar uma aplicação wsgi com diversos &lt;code&gt;workers&lt;/code&gt; fazendo assim com que as requisições sejam divididas entre eles e como consequência, tornar a aplicação &lt;em&gt;mais robusta&lt;/em&gt;.
Utilizaremos o Gunicorn para controlar a instancia de nossa aplicação, com a seguinte &lt;em&gt;command line&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn -b 0.0.0.0:8000 -w &lt;span class="m"&gt;4&lt;/span&gt; run:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o comando acima, estamos liberando o acesso externo para a aplicação, estamos rodando a aplicação com 4 &lt;code&gt;workers&lt;/code&gt; e finalmente estamos definindo que o objeto WSGI que deverá ser executado é o objeto &lt;code&gt;app&lt;/code&gt; que se encontra no scritp &lt;code&gt;run.py&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Outra opção ao Gunicorn é o &lt;a href="https://uwsgi-docs.readthedocs.org/en/latest/"&gt;uWSGI&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Supervisor&lt;/h4&gt;
&lt;p&gt;O &lt;a href="http://supervisord.org/"&gt;Supervisor&lt;/a&gt; é um sistema de que monitora e controla processos unix.
O Supervisor garante que caso nossa aplicação finalize devido a alguma falha, ele se encarregará de subir novamente o processo, assim como subir o processo da aplicação caso o sistema operacional seja reiniciado.
Utilizaremos o Supervisor para controlar nosso processo do &lt;em&gt;Gunicorn&lt;/em&gt;, com as seguintes configurações.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[supervisord]&lt;/span&gt;
&lt;span class="na"&gt;nodaemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[program:my_app]&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;gunicorn -b 0.0.0.0:8000 -w 4 run:app&lt;/span&gt;
&lt;span class="na"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/my_app/&lt;/span&gt;
&lt;span class="na"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;autorestart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/my_app/logs/supervisor.log&lt;/span&gt;
&lt;span class="na"&gt;redirect_stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basicamente estamos definindo a &lt;em&gt;command line&lt;/em&gt; de nossa aplicação e redirecionando a saída padrão e a saída de erro para um arquivo de log.&lt;/p&gt;
&lt;h3&gt;Conteinerizando a aplicação&lt;/h3&gt;
&lt;p&gt;Finalmente iremos colocar tudo isso dentro de uma imagem do Docker e executar como um container.
Veja um exemplo de como a estrutura do projeto pode ficar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── my_app
│   └── __init__.py
├── requirements.txt
├── run.py
└── supervisord.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Não esqueça de criar o &lt;code&gt;requirements.txt&lt;/code&gt; com as dependências do seu projeto :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para a mágica acontecer, iremos criar nosso &lt;code&gt;Dockerfile&lt;/code&gt; na raiz do diretório do projeto.&lt;/p&gt;
&lt;h4&gt;Dockerfile&lt;/h4&gt;
&lt;p&gt;O intuito do Dockerfile será criar uma imagem do Docker com toda a stack que iremos utilizar no projeto, o código fonte da aplicação e uma configuração básica de execução, para que seja possível fácilmente executar a aplicação a partir de um container dessa imagem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:2.7&lt;/span&gt;

&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; Diego Garcia &amp;lt;drgarcia1986@gmail.com&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; . /my_app&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; supervisord.conf /etc/supervisor/conf.d/my_app.conf&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /my_app&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; pip install supervisor gunicorn
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r requirements.txt

&lt;span class="k"&gt;RUN&lt;/span&gt; mkdir logs
&lt;span class="k"&gt;RUN&lt;/span&gt; touch logs/supervisor.log

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8000&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [&amp;quot;supervisord&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Já existem as imagens do Python no repostórios padrão do &lt;a href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt; :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pronto, já temos tudo que precisamos para containerizar nossa aplicação, sendo assim, &lt;code&gt;It's party time!&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Executando a aplicação via container&lt;/h3&gt;
&lt;h4&gt;Criar&lt;/h4&gt;
&lt;p&gt;Estrutura pronta e Dockerfile pronto, agora é a vez de criar a imagem docker da nossa aplicação, para isso, usaremos o comando &lt;code&gt;docker build&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker build -t my_app .
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Executar&lt;/h4&gt;
&lt;p&gt;Após o processo de criação da imagem, basta usar o comando &lt;code&gt;docker run&lt;/code&gt; para executar o container.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run -d -p 8000:8000 my_app
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;A opção &lt;code&gt;-d&lt;/code&gt; está dizendo ao comando que queremos executar o container em background, enquanto que a opção &lt;code&gt;-p&lt;/code&gt; faz o mapeamento da porta 8000 do container com a porta 8000 local.
Você pode dar um nome para o container, para isso basta utilizar a opção &lt;code&gt;--name&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Com isso nossa aplicação finalmente está no ar em &lt;code&gt;127.0.0.1:8000&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Listar&lt;/h4&gt;
&lt;p&gt;Para listar o containers que estão em execução, utilize o comando &lt;code&gt;docker ps&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker ps
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Parar&lt;/h4&gt;
&lt;p&gt;E por fim, para parar a execução de um container, existe o comando &lt;code&gt;docker stop&lt;/code&gt; que espera como parametro o &lt;em&gt;ID&lt;/em&gt; (que pode ser obtido através do comando &lt;code&gt;docker ps&lt;/code&gt;) ou nome do container.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker stop 80febff98649
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;Vimos de uma forma simples e prática como criar um flow de conteinerização de aplicações python wsgi que pode ser reaproveitado sempre que necessário afim de agilizar bastante o processo de configuração e execução da aplicação.
Em um próximo post veremos um pouco sobre o &lt;strong&gt;docker compose&lt;/strong&gt; e como fazer o deploy de nossos containers na nuvem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.docker.com/"&gt;Site Oficial&lt;/a&gt;&lt;br&gt;
&lt;a href="http://docs.docker.com/"&gt;Documentação oficial&lt;/a&gt;&lt;/p&gt;</summary><category term="docker"></category><category term="devops"></category><category term="linux"></category><category term="python"></category></entry><entry><title>Debugging em python (sem IDE)</title><link href="http://www.diego-garcia.info/2015/02/15/debuggin-em-python-sem-ide/" rel="alternate"></link><published>2015-02-15T22:30:00-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2015-02-15:2015/02/15/debuggin-em-python-sem-ide/</id><summary type="html">&lt;p&gt;Um dos principais motivos que ainda levam desenvolvedores Python a recorrerem a IDEs pesadas e que requerem instalação é o &lt;strong&gt;debugging&lt;/strong&gt;.
Devs que vieram de linguagens como &lt;em&gt;DotNet&lt;/em&gt;, &lt;em&gt;Java&lt;/em&gt; e &lt;em&gt;Delphi&lt;/em&gt; por exemplo, estão acostumados a IDEs super pesadas e inchadas que no final das contas, além do debugging, só servem para drenar memória RAM.
Brincadeiras a parte, não a motivos para você não dar uma chance ao &lt;strong&gt;VIM&lt;/strong&gt; ou ao &lt;strong&gt;Sublime&lt;/strong&gt;, pois para fazer debugging em scripts python, tudo que você precisa é o &lt;strong&gt;PDB&lt;/strong&gt;.&lt;/p&gt;


&lt;h1&gt;PDB&lt;/h1&gt;
&lt;p&gt;O &lt;code&gt;pdb&lt;/code&gt; é um módulo &lt;em&gt;buit-in&lt;/em&gt; que funciona como um console interativo, onde é posssível realizar debug de códigos python.
Nele é possível fazer um &lt;em&gt;step-by-step&lt;/em&gt; do código, verificando o valor de variaveis, definindo breakpoints, manipulando valores, etc.
É possível inclusive realizer &lt;em&gt;step-into&lt;/em&gt; em métodos. Ou seja, tudo que uma boa ferramenta de debug precisa ter.&lt;/p&gt;
&lt;h2&gt;Comandos&lt;/h2&gt;
&lt;p&gt;Antes de partirmos para prática, é importante conhecer alguns comandos básicos para já começar o uso do pdb de forma efetiva.&lt;/p&gt;
&lt;p&gt;Durante o debugging, eventualmente seu script irá &lt;em&gt;estacionar&lt;/em&gt; em pontos de paradas, possívelmente definidos por você, neste momento, os comandos a seguir poderão ser utilizados.&lt;/p&gt;
&lt;h3&gt;q (quit)&lt;/h3&gt;
&lt;p&gt;Sai da execução do script.&lt;/p&gt;
&lt;h3&gt;n (next)&lt;/h3&gt;
&lt;p&gt;Avança para a próxima linha do script.&lt;/p&gt;
&lt;h3&gt;p (print)&lt;/h3&gt;
&lt;p&gt;Executa o comando &lt;code&gt;print&lt;/code&gt; do python, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo var&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;foo var&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Vale ressaltar que no exemplo acima, não é necessário utilizar o comando &lt;code&gt;p&lt;/code&gt;, basta digitar o nome da variável e pressionar &lt;code&gt;enter&lt;/code&gt;, o efeito seria o mesmo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;c (continue)&lt;/h3&gt;
&lt;p&gt;Avança o debug até o próximo &lt;strong&gt;breakpoint&lt;/strong&gt; ou até ocorrer uma &lt;strong&gt;exception&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;l (list)&lt;/h3&gt;
&lt;p&gt;Lista algumas linhas do código que estão em volta da linha atual.
Por padrão serão apresentadas 11 linhas (5 acima e 5 abaixo).&lt;/p&gt;
&lt;h3&gt;s (step into)&lt;/h3&gt;
&lt;p&gt;Ao realizar a navegação através do comando &lt;code&gt;n&lt;/code&gt; o debug &lt;strong&gt;não&lt;/strong&gt; irá &lt;em&gt;entrar&lt;/em&gt; em métodos que possívelmente forem invocados.
Para que o debug entre no método que está sendo invocado na linha corrente, basta trocar o comando &lt;code&gt;n&lt;/code&gt;, pelo comando &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;barz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;r (return)&lt;/h3&gt;
&lt;p&gt;Já o comando &lt;code&gt;r&lt;/code&gt; libera a execução do script até sair da função atual.&lt;/p&gt;
&lt;h3&gt;b (breakpoint)&lt;/h3&gt;
&lt;p&gt;Cria um breakpoint em uma determinada linha ou método, por exemplo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="n"&gt;Breakpoint&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No comando acima, setamos um breakpoint na linha 21 de nosso script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;Breakpoint&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já no exemplo acima, setamos o breakpoint para o método &lt;code&gt;foo&lt;/code&gt;.
O pdb informa qual linha ele setou o breakpoint, em nosso exemplo o método &lt;code&gt;foo&lt;/code&gt; está na linha 30 do script.&lt;/p&gt;
&lt;h3&gt;a (arguments)&lt;/h3&gt;
&lt;p&gt;O comando &lt;code&gt;a&lt;/code&gt; mostra os argumentos que foram passados para a função atual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;barz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;the_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;barz&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;ENTER&lt;/h3&gt;
&lt;p&gt;Se você pressionar o &lt;code&gt;ENTER&lt;/code&gt; sem nenhum comando no pdb, ele irá repetir o último comando executado.&lt;/p&gt;
&lt;h2&gt;Debug na prática&lt;/h2&gt;
&lt;p&gt;Vamos utilizar um script python simples e didático como exemplo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NumberList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NumberList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The End&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse script possui uma classe chamada &lt;code&gt;NumberList&lt;/code&gt; que armazena uma lista de numeros e retorna a soma deles.
Além destas classe, esse script também realiza algumas operações como instanciar essa classe e realizar alguns testes de asserção.
Salve esse script em um arquivo chamado &lt;code&gt;numbers.py&lt;/code&gt; para ser utilizado em nossos exemplos.&lt;/p&gt;
&lt;h2&gt;Modos de uso do pdb&lt;/h2&gt;
&lt;p&gt;Na prática o pdb se assemelha bastante ao prompt interativo do python, com a diferença dos caracteres identificadores.
Enquanto que no prompt interativo do python o identificador é o &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;, no pdb o identificador é &lt;code&gt;(Pdb)&lt;/code&gt;.
Existem algumas maneiras de usar o pdb, depende da forma como você pretende realizer o debug.&lt;/p&gt;
&lt;h3&gt;pdb.py&lt;/h3&gt;
&lt;p&gt;Uma delas é através da chamada do script &lt;code&gt;pdb.py&lt;/code&gt; passando como paramêtro o script para ser feito do debug, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pdb numbers.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso fará com que o pdb seja iniciado na primeira linha do script &lt;code&gt;numbers.py&lt;/code&gt;, no caso, a declaração da classe &lt;code&gt;NumberList()&lt;/code&gt;.
Caso você execute o comando &lt;code&gt;n&lt;/code&gt;, a próxima linha será o &lt;code&gt;if "__main__" == __name__:&lt;/code&gt; e assim por diante.
Utilizando desta maneira, você pode verificar linha a linha do script ou &lt;em&gt;setar&lt;/em&gt; um breakpoint assim que entrar no debug, por exemplo, se você quer criar um breakpoint na execução do método &lt;code&gt;sum()&lt;/code&gt; de uma instância da classe &lt;code&gt;NumberList()&lt;/code&gt;, basta executar o comando &lt;code&gt;b numbers.sum&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nd"&gt;@machine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NumberList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NumberList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;
&lt;span class="n"&gt;Breakpoint&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou para simplificar, também poderiamos setar o breakpoint pelo número da linha.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nd"&gt;@machine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NumberList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;Breakpoint&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;pdb.set_trace()&lt;/h3&gt;
&lt;p&gt;Outra forma é utilizando o método &lt;code&gt;set_trace()&lt;/code&gt; do pacote &lt;code&gt;pdb&lt;/code&gt;.
Com o &lt;code&gt;pdb.set_trace()&lt;/code&gt; você pode definir onde será o seu breakpoint via código, por exemplo, faremos uma alteração em nosso script para setar um breakpoint no método &lt;code&gt;NumberList().sum()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NumberList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;
        &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Resto do script omitido&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dessa forma, ao executar o script (sem a necessidade de ser via pdb) e passar pelo método &lt;code&gt;pdb.set_trace()&lt;/code&gt; será iniciado um prompt interativo do pdb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nd"&gt;@machine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ipdb&lt;/h2&gt;
&lt;p&gt;Uma das desvantagens do prompt interativo do python é a falta de &lt;em&gt;syntax highlighting&lt;/em&gt; e &lt;em&gt;code completion&lt;/em&gt;, com o pdb não é diferente, porém, assim como podemos recorrer ao &lt;a href="http://ipython.org/"&gt;ipython&lt;/a&gt; para isso, também podemos utilizar o &lt;a href="https://github.com/gotcha/ipdb"&gt;ipdb&lt;/a&gt;.
O &lt;code&gt;ipdb&lt;/code&gt; é uma espécie de wrapper para o pdb que faz uso das rotinas de debug do &lt;code&gt;IPython&lt;/code&gt;.
A maneira de uso se assemelha bastante ao pdb, bastando trocar o pacote &lt;code&gt;pdb&lt;/code&gt; pelo pacote &lt;code&gt;ipdb&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ipdb&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para instalar o ipdb basta utilizar o &lt;code&gt;pip&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install ipdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com certeza recomendo o uso do &lt;code&gt;ipdb&lt;/code&gt; principalmente por ser mais intuitivo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br \&gt;
&lt;a href="https://docs.python.org/2/library/pdb.html"&gt;Documentação Oficial&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/gotcha/ipdb"&gt;ipdb&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="pdb"></category><category term="debugging"></category><category term="debug"></category></entry><entry><title>Docker, por onde começar</title><link href="http://www.diego-garcia.info/2015/02/15/docker-por-onde-comecar/" rel="alternate"></link><published>2015-02-15T10:32:26-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2015-02-15:2015/02/15/docker-por-onde-comecar/</id><summary type="html">&lt;p&gt;Uma das grandes novidades da tecnologia que mais me chamaram a atenção ultimamente é o &lt;strong&gt;Docker&lt;/strong&gt;, essa poderosa ferramenta que veio para deixar qualquer devops feliz da vida.
Arrisco dizer que, nos próximos anos, se o Docker não acabar com a virtualização, essa só irá existir em conjunto com o Docker.
O projeto ainda está no começo mas já existem pessoas utilizando em produção.
Entenda um pouco sobre o que é o Docker e como você pode começar a utilizar em seu dia a dia.&lt;/p&gt;


&lt;h3&gt;Docker&lt;/h3&gt;
&lt;p&gt;O Docker é uma plataforma open source (escrita em &lt;strong&gt;Go&lt;/strong&gt;) que trabalha com o conceito de &lt;em&gt;containers&lt;/em&gt;.
A ideia do projeto é simples, se você precisa de uma stack com &lt;strong&gt;ubuntu&lt;/strong&gt;, &lt;strong&gt;python&lt;/strong&gt;, &lt;strong&gt;nginx&lt;/strong&gt; e &lt;strong&gt;supervisor&lt;/strong&gt; por exemplo, você pode colocar tudo isso em um container e deixar esse container pronto para &lt;em&gt;subir&lt;/em&gt; a qualquer hora, sem que seja necessário instalar esses aplicativos novamente.
Pensando dessa forma, o conceito pode se confundir com o conceito de virtualização, porém, o funcionamento é muito diferente.
Enquanto que em uma máquina virtual, possuimos um S.O. completo e isolado, no Docker, aproveitamos o kernel do S.O. hospedeiro, fazendo com isso com que o processo seja muito mais rápido mas sem perder o isolamento dos arquivos e dos processos.&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;img src="/images/docker_vs_vm.png"&gt;
&lt;/p&gt;

&lt;p&gt;Para que isso seja possível, o docker utiliza o &lt;a href="https://linuxcontainers.org/"&gt;Linux Containers&lt;/a&gt; para ter acesso aos recursos do S.O. e também utiliza o &lt;a href="http://aufs.sourceforge.net/"&gt;AuFS&lt;/a&gt; para controlar o sistema de arquivos.&lt;/p&gt;
&lt;h3&gt;Instalado o Docker&lt;/h3&gt;
&lt;p&gt;Chega de conversa fiada, vamos para a prática, afinal, &lt;em&gt;talk is cheap&lt;/em&gt;.
Para instalar o Docker no ubuntu, basta instalar o pacote &lt;code&gt;docker.io&lt;/code&gt; através do &lt;code&gt;apt-get&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo apt-get install docker.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para confirmar se a instalação foi bem sucedida, utilize o comando &lt;code&gt;docker version&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker version
Client version: 1.0.1
Client API version: 1.12
Go version &lt;span class="o"&gt;(&lt;/span&gt;client&lt;span class="o"&gt;)&lt;/span&gt;: go1.2.1
Git commit &lt;span class="o"&gt;(&lt;/span&gt;client&lt;span class="o"&gt;)&lt;/span&gt;: 990021a
Server version: 1.0.1
Server API version: 1.12
Go version &lt;span class="o"&gt;(&lt;/span&gt;server&lt;span class="o"&gt;)&lt;/span&gt;: go1.2.1
Git commit &lt;span class="o"&gt;(&lt;/span&gt;server&lt;span class="o"&gt;)&lt;/span&gt;: 990021a
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Para utilizar o Docker é necessário acesso de root.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Criando uma imagem de um container&lt;/h3&gt;
&lt;p&gt;Agora iremos criar uma imagem de um container do docker para aplicações &lt;code&gt;WSGI&lt;/code&gt; com Python (&lt;em&gt;python2.7&lt;/em&gt;, &lt;em&gt;pip&lt;/em&gt; e &lt;em&gt;virtualenv&lt;/em&gt;), Nginx, Gunicorn e Supervisor instalados.
Esse container será baseado na imagem do &lt;strong&gt;Ubuntu&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Ubuntu&lt;/h4&gt;
&lt;p&gt;As imagens dos containers do docker são armazenadas no &lt;strong&gt;Docker Hub&lt;/strong&gt; e podem ser baixadas através do comando &lt;code&gt;docker pull&lt;/code&gt; (veremos mais sobre o &lt;em&gt;docker hub&lt;/em&gt;).
Para baixar a imagem do ubuntu, basta executar o comando a seguir.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker pull ubuntu:14.04
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;No comando acima, realizamos o download da imagem do ubuntu na &lt;em&gt;tag&lt;/em&gt; 14.04.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para testar se o download da imagem foi bem sucedido, iremos executar uma instrução dentro do container do ubuntu, através do comando &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker run ubuntu:14.04 cat /etc/lsb-release
&lt;span class="nv"&gt;DISTRIB_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Ubuntu
&lt;span class="nv"&gt;DISTRIB_RELEASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;14.04
&lt;span class="nv"&gt;DISTRIB_CODENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;trusty
&lt;span class="nv"&gt;DISTRIB_DESCRIPTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ubuntu 14.04.1 LTS&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Essa instrução irá executar o comando &lt;code&gt;cat /etc/lsb-release&lt;/code&gt; dentro do container do ubuntu.
Se você conseguiu executar esse comando com sucesso, parabéns, você já está utilizando o Docker :).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se você tiver algum problema para executar o comando &lt;code&gt;docker pull&lt;/code&gt; adicione ao final do arquivo &lt;code&gt;/etc/resolv.conf&lt;/code&gt; a linha &lt;code&gt;nameserver 8.8.8.8&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Fluxo de criação do container&lt;/h4&gt;
&lt;p&gt;Antes de prosseguirmos é importante entender o fluxo de criação dos containers.
O Docker é muito semelhante ao &lt;strong&gt;GIT&lt;/strong&gt; em termos de fluxo de trabalho.
Por padrão o docker &lt;strong&gt;não&lt;/strong&gt; efetiva os comandos que são executados em um container.
Para que as alterações sejam efetivadas é necessário realizar um &lt;code&gt;commit&lt;/code&gt; dessas alterações.
Isso é excelente para realizar experimentos, pois, imagine que você pode acessar um container, instalar um aplicativo qualquer, realizar diversos teste e sair do container, desta forma as alterações feitas somente serão afetivadas se o comando &lt;code&gt;docker commit&lt;/code&gt; for executado.&lt;/p&gt;
&lt;p&gt;Veremos isso na prática ao instalar nossa stack em nosso container.&lt;/p&gt;
&lt;h4&gt;Criando a Stack&lt;/h4&gt;
&lt;p&gt;Agora que já temos a imagem base para criar nosso container, podemos dar sequência.
Como iremos instalar diversos aplicativos, faremos do modo mais simples, instalaremos pelo bash do container.
Para iniciar o bash de um container, execute o comando &lt;code&gt;docker run -t -i IMAGEM /bin/bash&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker run -t -i ubuntu:14.04 /bin/bash
root@4e0ba33ccad5:/#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim será iniciado o bash do container e neste ponto não tem muito segredo, basta instalar os aplicativos.
Começaremos pelos aplicativos que são instalados através do &lt;code&gt;apt-get&lt;/code&gt; (&lt;em&gt;python&lt;/em&gt;, &lt;em&gt;pip&lt;/em&gt; e &lt;em&gt;nginx&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@4e0ba33ccad5:/# apt-get update
root@4e0ba33ccad5:/# apt-get install -y python python-pip nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o python e o pip instalado, agora podemos instalar o &lt;em&gt;virtualenv&lt;/em&gt;, o &lt;em&gt;gunicorn&lt;/em&gt; e o &lt;em&gt;supervisor&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@4e0ba33ccad5:/# pip install virtualenv supervisor gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para sair do container use o comando &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Realizando commit da alterações&lt;/h4&gt;
&lt;p&gt;Para que essa alterações sejam efetivadas em nosso container (gerando assim uma nova imagem), devemos executar &lt;em&gt;commit&lt;/em&gt;.
O comando &lt;code&gt;docker commit&lt;/code&gt; possui a seguinte sintaxe.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker commit &lt;span class="o"&gt;[&lt;/span&gt;OPÇÕES&lt;span class="o"&gt;]&lt;/span&gt; CONTAINER &lt;span class="o"&gt;[&lt;/span&gt;REPOSITORIO&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Porém, sabemos que o nome da imagem é &lt;code&gt;ubuntu:14.04&lt;/code&gt; mas não sabemos a identificação do container que criamos.
Para saber qual é a identificação do ultimo container criado, execute o comando &lt;code&gt;docker ps -l&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker ps -l
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
4e0ba33ccad5        ubuntu:14.04        /bin/bash           &lt;span class="m"&gt;22&lt;/span&gt; minutes ago      Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; minutes ago                       focused_mayer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Segundo o resultado do comando &lt;code&gt;docker ps&lt;/code&gt; o ID do nosso container é &lt;code&gt;4e0b&lt;/code&gt; (só precisaremos dos 4 primeiros digitos).
Sendo assim, para finalmente realizar o commit, utilizaremos o comando a seguir.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker commit 4e0b wsgi-stack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o comando acima, estamos criando uma nova imagem chamada &lt;code&gt;wsgi-stack&lt;/code&gt; com o conteúdo das alterações que realizamos anteriormente.
Para conferir se tudo funcinou corretamente, vamos executar o comando &lt;code&gt;python --version&lt;/code&gt; em nosso novo container.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker run wsgi-stack python --version
Python 2.7.6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com isso nossa imagem &lt;strong&gt;wsgi-stack&lt;/strong&gt; já está concluída e pronta para o uso, mas antes de efetivamente colocarmos uma aplicações para rodar nela, veremos uma forma mais fácil de criar imagens do docker, através do &lt;strong&gt;Dockerfile&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Dockerfile&lt;/h3&gt;
&lt;p&gt;Um &lt;code&gt;Dockerfile&lt;/code&gt; é um script que automatiza a criação de imagens do docker.
Podemos simplificar a criação da imagem &lt;code&gt;wsgi-stack&lt;/code&gt; que criamos anteriormente com o seguinte &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:14.04&lt;/span&gt;

&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; Diego Garcia &amp;lt;drgarcia1986@gmal.com&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update
&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install -y python python-pip nginx
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install virtualenv gunicorn supervisor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para criar a imagem baseado no Dockerfile, basta executar o comando &lt;code&gt;docker build&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker build -t wsgi-stack .
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;O &lt;code&gt;.&lt;/code&gt; (ponto) indica que o &lt;code&gt;Dockerfile&lt;/code&gt; está no mesmo diretório onde o comando &lt;code&gt;docker build&lt;/code&gt; está sendo executado.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basicamente o comando acima cria uma imagem chamada &lt;code&gt;wsgi-stack&lt;/code&gt; baseada no &lt;code&gt;Dockerfile&lt;/code&gt; que está presente no mesmo diretório.&lt;/p&gt;
&lt;h4&gt;Comandos do Dockerfile&lt;/h4&gt;
&lt;p&gt;O Dockerfile é uma ferramenta muito poderosa para a criação de imagens do docker.
Veja alguns comandos que podem ser utilizados no Dockerfile.&lt;/p&gt;
&lt;h5&gt;FROM&lt;/h5&gt;
&lt;p&gt;Primeira instrução, define a imagem base.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu14:04&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;MAINTAINER&lt;/h5&gt;
&lt;p&gt;Especifica o autor da imagem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; Foo foo@bar.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;RUN&lt;/h5&gt;
&lt;p&gt;Equivalente ao comando &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install python
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;ENV&lt;/h5&gt;
&lt;p&gt;Define uma variável de ambiente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PORT=8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;EXPOSE&lt;/h5&gt;
&lt;p&gt;Expõe portas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;ADD&lt;/h5&gt;
&lt;p&gt;Copia arquivos do host hospedeiro para dentro da imagem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; foo.txt /bar/foo.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;ENTRYPOINT&lt;/h5&gt;
&lt;p&gt;Permite que a imagem seja executada como uma aplicativo (a partir da linha de comando especificada).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; [&amp;quot;python&amp;quot;, &amp;quot;app.py&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;CMD&lt;/h5&gt;
&lt;p&gt;Comando que será executado quando a execução do container for acionada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [&amp;quot;supervisord&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;DockerHub&lt;/h3&gt;
&lt;p&gt;O DockerHub é uma espécie de &lt;em&gt;GitHub&lt;/em&gt; do Docker.
Nele você pode criar uma conta e armazenar suas imagens do Docker, assim como usufluir das imagens de outros usuários.
Em nosso exemplo, utilizamos a imagem do &lt;em&gt;ubuntu&lt;/em&gt; que está armazenada no DockerHub, através do comando &lt;code&gt;docker pull ubuntu&lt;/code&gt; e através do &lt;code&gt;FROM ubuntu&lt;/code&gt; do Dockerfile.
Assim como no GitHub, o endereço das imagens é sempre &lt;code&gt;ususário/imagem&lt;/code&gt; com exceção das imagens padrão (como é o caso da imagem do ubuntu).&lt;/p&gt;
&lt;h4&gt;Enviando uma imagem para o Docker Hub&lt;/h4&gt;
&lt;p&gt;Para enviarmos nossa imagem &lt;code&gt;wsgi-stack&lt;/code&gt; para o DockerHub, primeiro é necessario &lt;a href="https://hub.docker.com/account/signup/"&gt;criar uma conta&lt;/a&gt; no serviço e depois fazer &lt;em&gt;login&lt;/em&gt; no aplicativo do Docker.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker login
Username: drgarcia1986
Password:
Email: drgarcia1986@gmail.com
Login Succeeded
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora para enviar a imagem para o DockerHub, basta utilizar o comando &lt;code&gt;docker push [IMAGEM]&lt;/code&gt;, porém, o nome da imagem deve serguir o padrão &lt;code&gt;user/image&lt;/code&gt; e nossa imagem está com o nome de &lt;code&gt;wsgi-stack&lt;/code&gt;, para resolver essa questão, podemos criar uma &lt;code&gt;tag&lt;/code&gt; da imagem com o nome no padrão esperado pelo Docker Hub.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~$ sudo docker tag wsgi-stack drgarcia1986/wsgi-stack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E finalmente enviar nossa imagem para o DockerHub.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine~$ sudo docker push drgarcia1986/wsgi-stack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, agora sempre que for preciso um docker com &lt;em&gt;python2.7&lt;/em&gt;, &lt;em&gt;pip&lt;/em&gt;, &lt;em&gt;virtualenv&lt;/em&gt;, &lt;em&gt;nginx&lt;/em&gt;, &lt;em&gt;supervisor&lt;/em&gt; e &lt;em&gt;gunicorn&lt;/em&gt;, basta fazer um pull da imagem &lt;em&gt;drgarcia1986/wsgi-stack&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine~$ sudo docker pull drgarcia1986/wsgi-stack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em uma segunda parte desse artigo veremos como executar uma aplicação web dentro de um conteiner e como automatizar ainda mais a criação de imagens do Docker através do ~Fig~ &lt;strong&gt;docker compose&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.docker.com/"&gt;Site Oficial&lt;/a&gt;&lt;br&gt;
&lt;a href="http://docs.docker.com/"&gt;Documentação oficial&lt;/a&gt;&lt;/p&gt;</summary><category term="docker"></category><category term="devops"></category><category term="linux"></category><category term="python"></category></entry><entry><title>Publicando seu Hello World no Heroku</title><link href="http://www.diego-garcia.info/2015/01/25/publicando-seu-hello-world-no-heroku/" rel="alternate"></link><published>2015-01-25T11:30:00-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2015-01-25:2015/01/25/publicando-seu-hello-world-no-heroku/</id><summary type="html">&lt;p&gt;O que é uma aplicação web se ela não está efetivamente na web? Não precisa ser efetivamente uma aplicação de produção, as vezes precisamos validar protótipos, compartilhar ferramentas online ou até mesmo publicar uma aplicação pela satisfação de publicar. Para isso não é necessário se preocupar com infraestrutura ou gastar dinheiro em aluguel de servidores. Existem diversas opções gratuitas e simples para isso, uma delas é o &lt;strong&gt;Heroku&lt;/strong&gt;.&lt;/p&gt;


&lt;h2&gt;Heroku&lt;/h2&gt;
&lt;p&gt;O Heroku é uma das opção mais populares de &lt;a href="http://pt.wikipedia.org/wiki/Plataforma_como_servi%C3%A7o"&gt;plataforma como serviço&lt;/a&gt; que suporta app escritos em diversas linguagens, dentre elas, &lt;strong&gt;Python&lt;/strong&gt;. Nele existem &lt;a href="https://www.heroku.com/pricing"&gt;planos pagos e gratuitos&lt;/a&gt; de acordo com o uso do serviço.
Para conhecer um pouco do processo de &lt;em&gt;deploy&lt;/em&gt; do heroku, criaremos um simples &lt;strong&gt;Hello World&lt;/strong&gt; utilizando &lt;strong&gt;Flask&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;O que você irá precisar?&lt;/h3&gt;
&lt;h4&gt;Uma conta no Heroku&lt;/h4&gt;
&lt;p&gt;Não se preocupe, você pode criar uma conta gratuita e usufruir do serviço sem problemas. Entre no &lt;a href="https://signup.heroku.com/"&gt;&lt;em&gt;Sign up&lt;/em&gt;&lt;/a&gt; e crie uma conta informando seu nome e seu e-mail.&lt;/p&gt;
&lt;h4&gt;Git&lt;/h4&gt;
&lt;p&gt;O Heroku utiliza o Git para realizar o deploy dos app. Você verá mais adianta que um simples &lt;code&gt;git push&lt;/code&gt; é o suficiente para enviarmos nosso app para o heroku.&lt;/p&gt;
&lt;h4&gt;Python, Pip, VirtualEnv&lt;/h4&gt;
&lt;p&gt;Bem, você vai criar sua aplicação em python não? Além da boa organização e isolamento para seu ambiente proporcionado pelo &lt;strong&gt;virtualenv&lt;/strong&gt;, manter seu app em um virtualenv proporciona algumas praticidades.&lt;/p&gt;
&lt;h3&gt;Instalando o Toolbet&lt;/h3&gt;
&lt;p&gt;O &lt;strong&gt;Toolbet&lt;/strong&gt; é uma poderosa ferramenta de linha de comando do heroku. É através dela que iremos criar nosso app no heroku.
No ubuntu (ou outras distribuições baseadas no debian) para instalar não poderia ser diferente, basta usar o todo poderoso &lt;code&gt;apt-get&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~/$ sudo apt-get install heroku
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Se você estiver usando outro sistema operacional, você pode baixar o instalador direto do &lt;a href="https://toolbelt.heroku.com/"&gt;site oficial&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Após a instalação, faça o login no heroku através do toolbet para se certificar que tudo deu certo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~/$ heroku login
Enter your Heroku credentials.
Email: your@email.com
Password &lt;span class="o"&gt;(&lt;/span&gt;typing will be hidden&lt;span class="o"&gt;)&lt;/span&gt;:
Authentication successful.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Preparando o App&lt;/h3&gt;
&lt;p&gt;Iremos agora criar nosso app que será compartilhado com o mundo. Nesse processo não tera nada de anormal, apenas a criação de uma aplicação web como qualquer outra.
Criaremos um diretório chamado &lt;code&gt;heroku_hello_world&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~/$ mkdir heroku_hello_world
user@machine:~/$ &lt;span class="nb"&gt;cd&lt;/span&gt; heroku_hello_world
user@machine:~/heroku_hello_world$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nele iremos criar um &lt;code&gt;virtualenv&lt;/code&gt; e ativa-lo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~/heroku_hello_world$ virtualenv venv
New python executable in venv/bin/python
Installing setuptools, pip...done.
user@machine:~/heroku_hello_world$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como disse anteriormente, iremos fazer o deploy de um simples &lt;strong&gt;Hello World&lt;/strong&gt;. A intenção aqui é ter um &lt;strong&gt;how-to&lt;/strong&gt; de como fazer o deploy de um app simples no heroku. Sendo assim, o &lt;strong&gt;Flask&lt;/strong&gt; é uma excelente opção para isso. Para instalar o Flask em nosso virtualenv, use o &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$ pip install flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E finalmente vamos criar nosso &lt;em&gt;Hello World&lt;/em&gt; no arquivo &lt;code&gt;hello.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Hello World&amp;lt;/hi&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um detalhe importante fica por conta da variável &lt;code&gt;port&lt;/code&gt;. No heroku não é possível subir o app na porta 5000 (porta default do Flask), mas o heroku seta a variável de ambiente &lt;code&gt;PORT&lt;/code&gt; em seu ambiente, definindo em qual porta a aplicação deve rodar. Da maneira como está implementado nosso app, iremos conseguir rodar tanto no heroku como localmente (através da porta 5000).&lt;/p&gt;
&lt;p&gt;O heroku precisa conhecer as dependências de nosso app para que, no momento do deploy ele construa o ambiente de forma correta. Seguindo o padrão, o heroku procura pelas dependências através do arquivo &lt;code&gt;requirements.txt&lt;/code&gt;. Como já isolamos nosso app em um virtualenv, basta utilizar o &lt;code&gt;pip freeze&lt;/code&gt; para listar os packages instalados e direcionar a saida desse comando para o arquivo &lt;em&gt;requirements.txt&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$ pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Preparando o Deploy&lt;/h3&gt;
&lt;p&gt;Iremos criar agora o arquivo &lt;code&gt;Procfile&lt;/code&gt;, onde será escrito o comando que o heroku deverá usar para executar nosso app, basicamente o mesmo comando que utilizaríamos para rodar a aplicação localmente. Esse arquivo (assim como o &lt;em&gt;requirements.txt&lt;/em&gt;) deverá estar na raiz da aplicação.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;web: python hello.py&amp;quot;&lt;/span&gt; &amp;gt; Procfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora que já possuímos todos os arquivos necessários, iremos iniciar o processo efetivo de deploy da aplicação. Como disse anteriormente, o heroku utiliza o git, sendo assim, nossa aplicação deverá estar em um repositório. Para isso, basta criar um repositório no diretório atual através do comando &lt;code&gt;git init&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$ git init
Initialized empty Git repository in /home/user/heroku_hello_world/.git/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para não &lt;em&gt;sujar&lt;/em&gt; nosso repositório com arquivos desnecessários como por exemplo o virtualenv, crie um arquivo chamado &lt;code&gt;.gitignore&lt;/code&gt; na raiz do repositório e nele iremos determinar quais arquivos o git deve ignorar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*.pyc
venv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos adicionar e commitar nossos arquivos nesse repositório através dos comandos &lt;code&gt;git add .&lt;/code&gt; para adicionar todos os arquivos e &lt;code&gt;git commit&lt;/code&gt; para criar nosso commit inicial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$ git add .
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$ git commit -m &lt;span class="s1"&gt;&amp;#39;initial commit&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;master &lt;span class="o"&gt;(&lt;/span&gt;root-commit&lt;span class="o"&gt;)&lt;/span&gt; 33f63b5&lt;span class="o"&gt;]&lt;/span&gt; initial commit
 &lt;span class="m"&gt;4&lt;/span&gt; files changed, &lt;span class="m"&gt;25&lt;/span&gt; insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; .gitignore
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; Procfile
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; hello.py
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; requirements.txt
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora vamos criar nosso app no heroku através do commando &lt;code&gt;heroku apps:create [nome do app]&lt;/code&gt;. O nome da aplicação deverá ser único, pois o heroku utiliza o nome da aplicação para compor a url.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$ heroku apps:create dg-hello-world
Creating dg-hello-world... &lt;span class="k"&gt;done&lt;/span&gt;, stack is cedar-14
https://dg-hello-world.herokuapp.com/ &lt;span class="p"&gt;|&lt;/span&gt; https://git.heroku.com/dg-hello-world.git
Git remote heroku added
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;É importante ter realizado o login no heroku através do toolbet antes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No resultado do comando &lt;code&gt;heroku apps:create&lt;/code&gt; já são apresentadas duas das coisas mais importantes para nosso app, a url de acesso e repositório git onde deverá ser enviada nossa aplicação.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se você executou esse comando no mesmo diretório onde criou seu repositório do git, o heroku já cria o apontamento para o repositório remoto com o nome de &lt;code&gt;heroku&lt;/code&gt;, não sendo necessário utilizar o comando &lt;code&gt;git remote add&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basicamente a url será no padrão &lt;code&gt;https://[nome do app].herokuapp.com/&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Efetivando o Deploy&lt;/h3&gt;
&lt;p&gt;Finalmente iremos realizar o deploy de nossa aplicação. Todos os passos anteriores foram passos preparatórios, o que significa que basta executá-los uma vez. Daqui em diante, para fazer o deploy de nosso app, basta enviar os commits do repositório local, para o repositório do heroku, através do comando &lt;code&gt;git push heroku master&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/heroku_hello_world$ git push heroku master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E pronto, basta agora acessar a url do seu app (no caso desse exemplo foi &lt;a href="https://dg-hello-world.herokuapp.com/"&gt;https://dg-hello-world.herokuapp.com/&lt;/a&gt;) e compartilhar com seus amigos =].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br \&gt;
&lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python"&gt;(Heroku) Getting Started With Python&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xviii-deployment-on-the-heroku-cloud"&gt;Deployment on the Heroku Cloud&lt;/a&gt;&lt;/p&gt;</summary><category term="web"></category><category term="heroku"></category><category term="flask"></category><category term="git"></category><category term="deploy"></category></entry><entry><title>Testes de carga com o Locust</title><link href="http://www.diego-garcia.info/2015/01/10/testes-de-carga-com-o-locust/" rel="alternate"></link><published>2015-01-10T18:45:15-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2015-01-10:2015/01/10/testes-de-carga-com-o-locust/</id><summary type="html">&lt;p&gt;Quanto de carga sua aplicação web aguenta? Se conseguiu responder essa pergunta, como você fez para medir esse desempenho? Se você não conseguiu responder nenhuma das questões anteriores, ou apenas uma, ou até mesmo respondeu as duas mas em algum momento utilizou a palavra &lt;em&gt;complicado&lt;/em&gt; para descrever como testou, chegou a hora de resolver esse problema de uma forma muito simples.&lt;/p&gt;


&lt;h2&gt;Locust&lt;/h2&gt;
&lt;p&gt;O Locust é uma ferramenta open source escrita em python para testes de carga em aplicações web (independente da técnologia). A principal caracteristica do Locust é a forma como são escritos os testes, simples códigos python. Com poucas linhas de código é possível escrever testes de carga que vão realmente colocar sua aplicação em um campo de batalha.&lt;/p&gt;
&lt;h3&gt;Instalação&lt;/h3&gt;
&lt;p&gt;Para quem usa Python a facilidade de uso já começa na instalação, basta utilizar o comando &lt;code&gt;pip install locustio&lt;/code&gt; e a instalação está feita.
Para instalar o Locust em um ambiente unix com &lt;em&gt;virtualenv&lt;/em&gt;, basta criar o virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~/locust$ virtualenv venv
New python executable in venv/bin/python
Installing setuptools, pip...done.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ativar o virtualenv&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@machine:~/locust$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/locust$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E instalar o Locust&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/locust$ pip install locustio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para confirmar se o Locust está instalado, use o comando &lt;code&gt;locust&lt;/code&gt; com a opção &lt;code&gt;-V&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/locust$ locust -V
&lt;span class="o"&gt;[&lt;/span&gt;2015-01-08 22:59:28,251&lt;span class="o"&gt;]&lt;/span&gt; machine/INFO/stdout: Locust 0.7.2
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Não se preocupe se aparecerem mensagens de &lt;em&gt;warning&lt;/em&gt; alertando sobre a ausência do &lt;em&gt;zmq&lt;/em&gt;, a ausência desse pacote não afeta nossa demostração.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Aplicação para testes&lt;/h3&gt;
&lt;p&gt;Para demonstrar a utilização do Locust, vamos criar um simples webservice que realiza conversões de tempo (por ex. &lt;em&gt;hora para segundo&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Na criação desse webservice, utilizaremos o &lt;strong&gt;Flask&lt;/strong&gt; por ser um dos frameworks mais simples e utilizados atualmente. Como o Locust utiliza o Flask internamente, ele já está instalado em nosso virtualenv.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Como o foco do post não é falar do &lt;em&gt;Flask&lt;/em&gt;, não entrarei em detalhes do framework, se você não está familiarizado com ele, recomendo a leitura deste &lt;a href="pythonclub.com.br/what-the-flask-pt-1-introducao-ao-desenvolvimento-web-com-python"&gt;excelente artigo&lt;/a&gt; do Bruno Rocha.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Crie um arquivo chamado &lt;strong&gt;converter.py&lt;/strong&gt; com o seguinte código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;


&lt;span class="n"&gt;converter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="c1"&gt;# day to hours&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;HM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="c1"&gt;# hour to minutes&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;MS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="c1"&gt;# minute to seconds&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;DM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1440&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# day to minutes&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;DS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;86400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# day to seconds&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;HS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;   &lt;span class="c1"&gt;# hour to seconds&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;lt;rule&amp;gt;/&amp;lt;int:value&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()](&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Rule for conversion not found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para testar essa aplicação basta inicia-la&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/locust$ python converter.py
 * Running on http://127.0.0.1:5000/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E realizar uma requisição&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://127.0.0.1:5000/hm/3
180
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Criando as &lt;em&gt;Locust Tasks&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Agora que já temos o que testar, vamos finalmente escrever nosso script Locust. Como eu disse anteriormente, os scripts Locust são scripts python, sem nenhum segredo.&lt;/p&gt;
&lt;p&gt;Os testes são baseados em &lt;strong&gt;Tasks&lt;/strong&gt; que são criadas em uma classe que herda da classe &lt;code&gt;TaskSet&lt;/code&gt; do Locust. Na classe &lt;em&gt;TaskSet&lt;/em&gt; o que determina se um método é uma &lt;em&gt;task&lt;/em&gt; é a presença do decorator &lt;code&gt;@task&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O Locust trabalha com o conceito de requests baseados em clientes com caracteristicas especificas. O principal atributo das classes de cliente &lt;em&gt;Locust&lt;/em&gt; é o atributo &lt;code&gt;task_set&lt;/code&gt;, que recebe a classe onde as tasks de teste estão especificadas. Como o foco é o teste de aplicações web, o protocolo em questão é o protocolo &lt;strong&gt;HTTP&lt;/strong&gt;, sendo assim, a classe base para criação desses &lt;em&gt;clientes&lt;/em&gt; é a classe &lt;code&gt;HttpLocust&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Não se assuste, como estamos falando de &lt;strong&gt;Python&lt;/strong&gt;, a explicação é praticamente maior que o código :).&lt;/p&gt;
&lt;p&gt;Para testar alguns métodos de nosso webservice, crie um arquivo chamado &lt;strong&gt;locust_script.py&lt;/strong&gt; com o código a seguir.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpLocust&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConverterTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;day_to_hour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dh/5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;day_to_minute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dm/2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConverterTasks&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No código acima, criamos a classe &lt;code&gt;ConverterTasks&lt;/code&gt; onde especificamos nossas tasks para os testes através do decorator &lt;code&gt;@task&lt;/code&gt; e a classe &lt;code&gt;ApiUser&lt;/code&gt; onde especificamos o nosso cliente Locust do tipo &lt;code&gt;HttpLocust&lt;/code&gt;, preenchendo o atributo &lt;code&gt;task_set&lt;/code&gt; com a classe &lt;code&gt;ConverterTask&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Como nosso cliente Locust é do tipo &lt;strong&gt;HttpLocust&lt;/strong&gt;, foi possível utilizar o objeto &lt;code&gt;self.client&lt;/code&gt; em nosso &lt;strong&gt;task_set&lt;/strong&gt;. Note que o objeto &lt;em&gt;self.client&lt;/em&gt; da classe &lt;em&gt;ConverterTasks&lt;/em&gt; consiste em um cliente http.&lt;/p&gt;
&lt;p&gt;Os atributos &lt;code&gt;min_wait&lt;/code&gt; e &lt;code&gt;max_wait&lt;/code&gt; especificam o tempo mínimo e máximo em milisegundos que o teste deve aguardar entre a execução de uma task e outra. O valor padrão desses atributos é &lt;em&gt;1000&lt;/em&gt; (1 segundo).&lt;/p&gt;
&lt;h3&gt;Executando os testes&lt;/h3&gt;
&lt;p&gt;Com o script locust escrito, é chegada a hora da mágica, vamos finalmente ver o Locust em ação. Se certifique que seu webservice está no ar e inicie seu script Locust com o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/locust$ locust -f locust_script.py –H http://127.0.0.1:5000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A opção &lt;code&gt;-f&lt;/code&gt; específica o arquivo com script Locust e a opção &lt;code&gt;-H&lt;/code&gt; específica o endereço do webservice que será testado.
Ao executar esse comando, o Locust será iniciado na porta &lt;strong&gt;8089&lt;/strong&gt; (porta padrão que pode ser alterada através da opção &lt;code&gt;-P&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Ao abrir no browser a url http://127.0.0.1:8089 será apresentada a seguinte tela:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tela inicial" src="/images/locust_inicial.png" /&gt;&lt;/p&gt;
&lt;p&gt;O campo &lt;strong&gt;Number of users to simulate&lt;/strong&gt; é referente a quantidade de usuários simultâneos que serão utilizados para o teste, já o campo &lt;strong&gt;Hatch rate&lt;/strong&gt; é referente a quantidade de usuários que serão adicionados ao teste por segundo (até atingir o numéro de usuários específicado na opção anterior). Específique as opções anteriores e clique em &lt;strong&gt;Start swarming&lt;/strong&gt; para que os testes sejam iniciados e seja apresentada a seguinte tela.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Testes" src="/images/locust.png" /&gt;&lt;/p&gt;
&lt;p&gt;Talvez as informações mais importantes apresentadas nessa tela é o &lt;strong&gt;RPS&lt;/strong&gt; (request per seconds) e os &lt;strong&gt;failures&lt;/strong&gt;.
Note que os resultados são apresentados por cada &lt;em&gt;Task&lt;/em&gt; e são totalizados no final da listagem.&lt;/p&gt;
&lt;h3&gt;Definindo &lt;em&gt;peso&lt;/em&gt; para os teste&lt;/h3&gt;
&lt;p&gt;É possível determinar o &lt;em&gt;peso&lt;/em&gt; de uma &lt;em&gt;task&lt;/em&gt; através do parâmetro opcional &lt;strong&gt;weight&lt;/strong&gt; do decarator &lt;code&gt;@task&lt;/code&gt;. Por exemplo, imagine que no cenário real são mais requisições para conversão de &lt;em&gt;dias para minutos&lt;/em&gt; do que de &lt;em&gt;dias para horas&lt;/em&gt;, sendo assim nossos testes devem seguir essa mesma lógica.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpLocust&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConverterTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;day_to_hour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dh/5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;day_to_minute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dm/2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConverterTasks&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Da forma como foi especificado acima, para cada requisição de conversão de &lt;em&gt;dia para horas&lt;/em&gt;, serão executadas duas de &lt;em&gt;dia para minutos&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Utilizando outros Verbos HTTP&lt;/h3&gt;
&lt;p&gt;Nesse nosso exemplo só utilizamos o método http &lt;em&gt;GET&lt;/em&gt;, até mesmo porque nosso webservice só possui métodos GET, porém, é possível utilizar os outros verbos HTTP, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpLocust&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegistersTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo@bar.net&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebsiteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RegistersTasks&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O cliente HTTP presente no objeto &lt;code&gt;self.client&lt;/code&gt; é baseado na biblioteca &lt;a href="http://docs.python-requests.org/en/latest/"&gt;Requests&lt;/a&gt;, sendo assim, os métodos http (GET, POST, PUT, DELETE, OPTIONS) estão disponiveis.&lt;/p&gt;
&lt;h3&gt;Testando com valores dinámicos&lt;/h3&gt;
&lt;p&gt;No teste do conversor de tempo, utilizamos valores fixos, porém, para se apróximar mais da realidade, o ideal seria testar com valores aleatórios. Como estamos falando de código Python, isso é muito simples, bastar alterar de:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dh/5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;para:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;


&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dh/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mas isso geraria um problema, pois o Locust agrupa o relatório de testes por url, como estamos realizando até 10 chamadas diferentes para o mesmo recurso, teriamos até 10 chamadas diferentes sendo listas e contabilizadas separadamente.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Random" src="/images/locust_random.png" /&gt;&lt;/p&gt;
&lt;p&gt;Para resolver esse problema, podemos nomear os requests independente da url, atráves do parâmetro &lt;code&gt;name&lt;/code&gt; dos métodos do client HTTP. Sendo assim nosso código poderia ficar da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpLocust&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConverterTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;day_to_hour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dh/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dh/[int]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;day_to_minute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dm/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dm/[int]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConverterTasks&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com isso o relatório volta a ser apresentado da maneira esperada.&lt;/p&gt;
&lt;p&gt;&lt;img alt="nomeadas" src="/images/locust_name.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Sessão de usuário&lt;/h3&gt;
&lt;p&gt;O cliente http da classe &lt;code&gt;HttpLocust&lt;/code&gt; preserva os cookies entre os requests, possibilitando realizar logins e consumir métodos remotos que dependem de uma sessão de usuário ativa.&lt;/p&gt;
&lt;p&gt;Para validar esse conceito, criaremos uma aplicação simples que possui login de usuário e um recurso protegido pela sessão. Somente o necessário para ver o Locust em ação.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abort&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a7b05c4e06fe0502af4a3d42dd41327b&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mypass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;John Lee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Robert Brown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;User not found&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Wrong password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# GET&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;                &amp;lt;p&amp;gt;User &amp;lt;input type=text name=username&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;                &amp;lt;p&amp;gt;Pass &amp;lt;input type=password name=password&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;                &amp;lt;p&amp;gt;&amp;lt;input type=submit value=SignIn&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;           &amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;lt;h1&amp;gt;Welcome &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;            &amp;lt;p&amp;gt;For logout click &amp;lt;a href=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;here&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;h1&amp;gt;Flask with session :)&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;p&amp;gt;Click &amp;lt;a href=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;here&amp;lt;/a&amp;gt; to login page&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A aplicação representada no código acima consiste em uma página inicial (&lt;code&gt;/&lt;/code&gt;), uma página de login (&lt;code&gt;/login&lt;/code&gt;), uma página de logout (&lt;code&gt;/logout&lt;/code&gt;) e uma página home do usuário (&lt;code&gt;/home&lt;/code&gt;) que só está acessivel para usuários logados. Obviamente esse é só um exemplo didático.&lt;/p&gt;
&lt;p&gt;Se criarmos um script Locust para testar essa aplicação e nele não realizarmos o login do usuário, teriamos uma série de falhas para consumir o método remoto &lt;code&gt;/home&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="401" src="/images/locust_session_fail.png" /&gt;&lt;/p&gt;
&lt;p&gt;Porém a classe &lt;code&gt;TaskSet&lt;/code&gt; do Locust possui o método &lt;code&gt;on_start&lt;/code&gt; que consiste no método que será executado (apenas uma vez) antes do cliente Locust iniciar as tasks. Será nele que iremos realizar o &lt;em&gt;login&lt;/em&gt; do usuário.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpLocust&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SessionTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mypass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebsiteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpLocust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SessionTasks&lt;/span&gt;
    &lt;span class="n"&gt;min_wai&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como estamos realizando o login do usuário sempre que o cliente Locust inicia suas &lt;em&gt;tasks&lt;/em&gt;, os cookies de sessão já estarão armazenados nos controles do objeto &lt;code&gt;self.client&lt;/code&gt;, com isso, é possível testar até mesmo os métodos que dependem de autenticação para serem consumidos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="session" src="/images/locust_session_success.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Escalando os testes&lt;/h3&gt;
&lt;p&gt;O Locust é baseado em eventos, graças a isso é possível simular milhares de usuários concorrentes na mesma máquinas, porém em alguns casos esse numero não é o suficiente. Pensando nessa necessidade, o Locust possibilita trabalhar de forma distribuida, através do conceito de &lt;strong&gt;Master&lt;/strong&gt; e &lt;strong&gt;Slave&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Segundo a documentação do Locust, recomenda-se instalar a biblioteca &lt;a href="http://zeromq.github.io/pyzmq/index.html"&gt;ZeroMQ&lt;/a&gt; para melhorar o desempenho dos testes distribuidos. Essa é a razão do &lt;em&gt;warning&lt;/em&gt; no momento da execução.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para iniciar uma instância &lt;em&gt;master&lt;/em&gt; do Locust, basta utilizar o parâmetro &lt;code&gt;--master&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine:~/locust$ locust -f locust_script.py -H http://127.0.0.1:5000 --master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Essa instancia do Locust não irá simular nenhum cliente para teste, apenas irá disponibilizar a interface web com as estatisticas dos testes realizados e irá aguardar a conexão dos &lt;em&gt;slaves&lt;/em&gt;, poís esses serão os responsáveis pela realização dos testes.&lt;/p&gt;
&lt;p&gt;Agora, para iniciar uma instância &lt;em&gt;slave&lt;/em&gt; do Locust, são utilizados dois parâmetros, o &lt;code&gt;--slave&lt;/code&gt; que determina que essa instância é um slave e o parâmetro &lt;code&gt;--master-host&lt;/code&gt; com a localização do &lt;em&gt;master&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;user@machine2:~/locust$ locust -f locust_script.py --slave --master-host&lt;span class="o"&gt;=&lt;/span&gt;192.168.0.15
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Tanto a máquina &lt;strong&gt;master&lt;/strong&gt; quanto as máquinas &lt;strong&gt;slave&lt;/strong&gt; precisam ter o Locust instalado e possuir uma cópia do script de testes que será executado de forma distribuida.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Com as instâncias slaves iniciadas, basta acessar no browser o Locust (da máquina &lt;em&gt;master&lt;/em&gt;) e ver os testes em ação.&lt;/p&gt;
&lt;p&gt;&lt;img alt="distribuido" src="/images/locust_distributed.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br&gt;
&lt;a href="http://locust.io/"&gt;Site Oficial&lt;/a&gt;&lt;br&gt;
&lt;a href="http://docs.locust.io/en/latest/index.html"&gt;Documentação&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="tests"></category></entry><entry><title>Use o cURL</title><link href="http://www.diego-garcia.info/2014/12/13/use-o-curl/" rel="alternate"></link><published>2014-12-13T01:04:33-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2014-12-13:2014/12/13/use-o-curl/</id><summary type="html">&lt;p&gt;O &lt;strong&gt;cURL&lt;/strong&gt; é uma poderosa ferramenta de linha de comando open source utilizada basicamente para transferir dados pela sintaxe de chamadas baseadas em URL.
Muito popular no mundo Unix, o cURL já vem por padrão na maioria das distribuições linux, porém, existem também versões para windows. Apesar da utilização principal do cURL ser voltada para realizar requisições &lt;em&gt;HTTP&lt;/em&gt;, o que poucos sabem é que ele também funciona para outros protocolos como por exemplo &lt;em&gt;FTP&lt;/em&gt;, &lt;em&gt;IMAP&lt;/em&gt;, &lt;em&gt;POP3&lt;/em&gt;, etc.&lt;/p&gt;


&lt;p&gt;Mesmo que muitos torçam o nariz para a linha de comando, ficar ninja no cURL vai lhe ajudar (e muito) em seu dia a dia, principalmente se você é um desenvolvedor de APIs.
Veja o básico para começar a trabalhar com ele.&lt;/p&gt;
&lt;h4&gt;Sintaxe Padrão&lt;/h4&gt;
&lt;p&gt;A sintaxe padrão do cURL é a seguinte&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl [parâmetros] [url]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para requisições simples, não é necessário nenhum parâmetro, somente a url de destino.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://localhost/
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Definindo o verbo HTTP&lt;/h4&gt;
&lt;p&gt;Por padrão, uma requisição simples no cURL é feita implicitamente através do verbo &lt;strong&gt;GET&lt;/strong&gt;, mas é possível alterar o verbo HTTP da requisição através da opção &lt;code&gt;-X&lt;/code&gt;. Sendo assim, para realizar uma chamada com o verbo &lt;strong&gt;DELETE&lt;/strong&gt; por exemplo, basta fazer desta forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X DELETE http://localhost/person/foo
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Enviando corpo na requisição&lt;/h4&gt;
&lt;p&gt;Principalmente em métodos &lt;em&gt;POST&lt;/em&gt; e &lt;em&gt;PUT&lt;/em&gt; é natural transmitir na requisição algum conteúdo no corpo, para fazer isso no cURL basta utilizar a opção &lt;code&gt;-d&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X POST -d &amp;#39;name=Fulano&amp;amp;email=fulano@foo.bar&amp;#39; http://localhost:8888/person/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Alterando os cabeçalhos da requisição&lt;/h3&gt;
&lt;p&gt;Geralmente é necessário especificar alguma informação no cabeçalho da requisição, como por exemplo o &lt;em&gt;Authorization&lt;/em&gt;, &lt;em&gt;Content-Type&lt;/em&gt;, etc. Para isso, utilize a opção &lt;code&gt;-H&lt;/code&gt; em cada item de cabeçalho adicionado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X POST -H &amp;#39;Content-Type: application/json&amp;#39; -d &amp;#39;{&amp;quot;name&amp;quot;: &amp;quot;Fulano&amp;quot;, &amp;quot;email&amp;quot;: &amp;quot;fulano@foo.bar&amp;quot;}&amp;#39; http://localhost:8888/person/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Salvando a resposta em arquivo&lt;/h3&gt;
&lt;p&gt;É muito comum realizar requisições para pegar um conteúdo que deverá ser salvo em um arquivo, por exemplo, baixar configurações, credenciais e os famosos &lt;em&gt;dotfiles&lt;/em&gt;. Existem duas formas de se fazer isso, uma é direcionando a saída do curl para um arquivo através do &lt;code&gt;&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://mydotfiles.net/vimrc &amp;gt; ~/.vimrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou através da opção &lt;code&gt;-o&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -o ~/.vimrc http://mydotfiles.net/vimrc
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Exibindo o cabeçalho de resposta&lt;/h4&gt;
&lt;p&gt;O cURL por padrão exibe somente o conteúdo do corpo da resposta, porém, muitas vezes (para não dizer todas), é necessário visualizar os cabeçalhos de retorno, como por exemplo o &lt;em&gt;status code&lt;/em&gt;. Nesses casos utilize a opção &lt;code&gt;-i&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -i http://localhost:8888/person
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depois que comecei a usar o &lt;strong&gt;cURL&lt;/strong&gt;, nunca mais usei nenhum tipo de client HTTP para realizar testes em minhas APIs e sinto que essa troca me tornou mais produtivo e mais profissional.
Como o cURL é praticamente um padrão, me sinto confortavel em usa-lo até para registrar o uso de APIs em manuais e exemplos.&lt;/p&gt;
&lt;p&gt;Para saber mais comandos, você pode usar tanto o help &lt;code&gt;curl --help&lt;/code&gt; quanto o manual &lt;code&gt;curl --man&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br&gt;
&lt;a href="http://curl.haxx.se/"&gt;Site oficial&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Validações de formulários e inputs</title><link href="http://www.diego-garcia.info/2014/11/23/validacoes-de-formularios-e-inputs/" rel="alternate"></link><published>2014-11-23T10:13:03-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2014-11-23:2014/11/23/validacoes-de-formularios-e-inputs/</id><summary type="html">&lt;p&gt;Qualquer um sabe que é praticamente impossível encontrar sites sem nenhum formulário, nem que seja apenas para contato com o autor. O que algumas pessoas não sabem é que o &lt;strong&gt;HTML5&lt;/strong&gt; adicionou algumas novas facilidades para lidarmos com formulários e inputs, algumas até, podem aposentar os antigos códigos de válidação em &lt;em&gt;JavaScript&lt;/em&gt;.&lt;/p&gt;


&lt;h3&gt;RegEx&lt;/h3&gt;
&lt;p&gt;Para demonstrar validações com RegEx em formulários e inputs, já iremos começar com o caso mais comum, &lt;strong&gt;e-mail&lt;/strong&gt;. Seja para um formulário de fale-conosco, comentários em um blogs, cadastros, etc, e-mail costuma ser o dado mais comum na internet.&lt;/p&gt;
&lt;h4&gt;Ao modo JavaScript&lt;/h4&gt;
&lt;p&gt;O modo mais comum de fazer qualquer validação em formulários HTML é com certeza o JavaScript. Para nosso exemplo iremos criar uma função chamada &lt;em&gt;validarEmail()&lt;/em&gt; que irá receber como parametro o endereço de e-mail que deverá ser validado e o &lt;em&gt;id&lt;/em&gt; de uma &lt;em&gt;div&lt;/em&gt; de mensagem genérica. Essa função fará a validação com &lt;strong&gt;RegEx&lt;/strong&gt; e irá mostrar uma mensagem na div indicando o resultado da validação.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validarEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;validacao&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ck_email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validacao&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ck_email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Endereço de e-mail inválido&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Endereço de e-mail válido&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nesse exemplo, faremos essa validação no evento &lt;strong&gt;onBlur&lt;/strong&gt; do input, ou seja, quando o input perder o foco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Digite seu e-mail:
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onBlur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;validarEmail(this.value, &amp;#39;validacao&amp;#39;);&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;validacao&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja o resultado&lt;/p&gt;
&lt;iframe width="100%" height="300" src="http://jsfiddle.net/drgarcia1986/3H2EU/2/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;

&lt;h4&gt;Ao modo HTML5&lt;/h4&gt;
&lt;p&gt;Com o &lt;strong&gt;HTML5&lt;/strong&gt; agora podemos realizar validações baseadas em &lt;em&gt;RegEx&lt;/em&gt; direto no input, através da propriedade &lt;strong&gt;pattern&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A principal diferença desta abordagem é o momento da validação. A validação baseada no pattern (assim como outras validações próprias do html5) estão diretamente ligadas a formulários, ou seja, a validação será executada somente no momento do &lt;em&gt;submit&lt;/em&gt; do formulário.&lt;/p&gt;
&lt;p&gt;Para não estender muito o post, as próximas validações faremos somente ao modo &lt;strong&gt;HTML5&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Campo obrigatório&lt;/h3&gt;
&lt;p&gt;A validação de campo obrigatório é moleza somente com recursos do HTML5, basta adicionar no input a propriedade &lt;strong&gt;required&lt;/strong&gt; e toda a mágica é feita :) .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Tipo do campo&lt;/h3&gt;
&lt;p&gt;Uma forma muito útil e simples de validar e estilizar o conteúdo de um input é determinando o seu tipo (&lt;em&gt;type&lt;/em&gt;). Por exemplo, para um campo que deverá armazenar números, podemos usar um input do tipo &lt;strong&gt;number&lt;/strong&gt;. Inclusive, com o tipo number é possível determinar um numero mínimo e um número máximo que o input deve aceitar, através das propriedades &lt;strong&gt;min&lt;/strong&gt; e &lt;strong&gt;max&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qtde&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qtde&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Existe um série de outros tipos específicos de inputs que podem nos fazer poupar muito trabalho, veja uma pequena lista:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;range&lt;/li&gt;
&lt;li&gt;url&lt;/li&gt;
&lt;li&gt;e-mail (sim, existe, porém a validação não é tão poderosa)&lt;/li&gt;
&lt;li&gt;entre outros.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veja exemplos dos tipos acima
&lt;iframe width="100%" height="300" src="http://jsfiddle.net/drgarcia1986/uqkxd2v3/embedded/result,html" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Esses tipos específicos são muito úteis para sites voltados para mobile, pois os navegadores mobile já estão preparados para exibir ao usuário somente a opção de teclado compatível com o input.&lt;/p&gt;
&lt;h3&gt;Estilizando inputs de acordo com a validação&lt;/h3&gt;
&lt;p&gt;É possível de forma simples e genérica aplicar estilos CSS em inputs com valores válidos ou inválidos, de acordo com as regras que você determinar. Por exemplo, criaremos um padrão em que inputs inválidos terão o fundo avermelhando e os inputs válidos terão o fundo azulado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:invalid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus:invalid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F08080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:valid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#87CEFA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para testarmos esse estilo, usaremos dois inputs, um do tipo &lt;em&gt;text&lt;/em&gt; porém de preenchimento obrigatório (&lt;em&gt;required&lt;/em&gt;) e um do tipo &lt;em&gt;number&lt;/em&gt; com o valor mínimo de 18.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Nome: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
Idade: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;idade&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;idade&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;18&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simples, prático e o melhor de tudo, genérico. Veja esse código funcionando:
&lt;iframe width="100%" height="300" src="http://jsfiddle.net/drgarcia1986/wtku5m7L/1/embedded/result,html,css" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Para deixar a aparência ainda mais profissional, podemos utilizar imagens nos inputs. Faremos o mesmo exemplo, porém, ao invés de usarmos cores de fundo nos inputs, iremos acrescentar pequenos icones após o conteúdo, indicado se o campo está válido ou inválido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:invalid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus:invalid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nb"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(/imgs/invalid.png)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nb"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nb"&gt;background-repeat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:valid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nb"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(/imgs/valid.png)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nb"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nb"&gt;background-repeat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O efeito no input do tipo number não é muito agradável, demonstrarei somente no campo do tipo text.
&lt;iframe width="100%" height="300" src="http://jsfiddle.net/drgarcia1986/wnjLjfcy/1/embedded/result,html,css" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Outra forma excelente de obter um efeito semelhante a este é utilizando os pseudo-elementos &lt;strong&gt;after&lt;/strong&gt; ou &lt;strong&gt;before&lt;/strong&gt;. Faremos uma pequena alteração no HTML, adicionando um &lt;em&gt;label&lt;/em&gt; para cada input.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Nome&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;idade&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;idade&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;18&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;idade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Idade&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Após o conteúdo deste label, iremos adicionar o simbolo &lt;strong&gt;X&lt;/strong&gt; para os inputs inválidos e o simbolo &lt;strong&gt;✓&lt;/strong&gt; para os inputs válidos, utilizando o pseudo-elemento &lt;em&gt;after&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:invalid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:valid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; ✓&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja o resultado:
&lt;iframe width="100%" height="300" src="http://jsfiddle.net/drgarcia1986/gzn6muzu/1/embedded/result,html,css" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h3&gt;Customizando as mensagens de validação padrão&lt;/h3&gt;
&lt;p&gt;Para finalizar, se você já testou fazer validações com o &lt;em&gt;pattern&lt;/em&gt; dos inputs, já deve ter notado que a mensagem que é exibida indicando que o conteúdo do input está inválido é muito genérica, no Firefox por exemplo a mensagem exibida é &lt;em&gt;"Por favor, satisfaça o formato requisitado"&lt;/em&gt;.
Existe uma forma de modificar essa mensagem via javascript, através do método &lt;strong&gt;setCustomValidity&lt;/strong&gt; aplicado no evento &lt;strong&gt;oninvalid&lt;/strong&gt; do input. Por exemplo, vamos imaginar um input que irá receber uma senha e essa senha pode conter qualquer tipo de caracter, porém, deverá ter um tamanho minímo de 8 caracteres.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;senha&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;oninvalid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;this.setCustomValidity(&amp;#39;No m&amp;amp;iacute;nimo 8 caracteres&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;oninput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;this.setCustomValidity(&amp;#39;&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;senha&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.{8,}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que foi necessário manipular o &lt;em&gt;CustomValidity&lt;/em&gt; setando uma string vazia no evento &lt;strong&gt;oninput&lt;/strong&gt; do input, isso porque, ao setar o CustomValidity com algum valor, o html interpreta que o input está inválido e não muda esse estado mesmo alterando o conteúdo para algo válido.
&lt;iframe width="100%" height="300" src="http://jsfiddle.net/drgarcia1986/4wfmphhj/embedded/result,html" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h4&gt;Referências&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.w3schools.com/tags/att_input_pattern.asp"&gt;Input Pattern - W3Schools&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://www.the-art-of-web.com/html/html5-form-validation/"&gt;Html5 form validation - Art of Web&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/5272433/html5-form-required-attribute-set-custom-validation-message"&gt;Set Custom Validation Message - Stackoverflow&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://www.w3schools.com/css/css_pseudo_elements.asp"&gt;CSS Pseudo Elements&lt;/a&gt;&lt;/p&gt;</summary><category term="html"></category><category term="forms"></category><category term="javascript"></category></entry><entry><title>Arredondando bordas com CSS3</title><link href="http://www.diego-garcia.info/2014/11/21/Arredondando-bordas-com-css3/" rel="alternate"></link><published>2014-11-21T00:00:00-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2014-11-21:2014/11/21/Arredondando-bordas-com-css3/</id><summary type="html">&lt;p&gt;Uma das hypes atuais da web é o uso massivo de imagens redondas, principalmente em avatares. Google, Facebook, Instagram e iOS, são só alguns exemplos de grandes nomes do design que aderiram a essa tendencia. Mas calma, se você quer pegar carona nessa onda, você não precisa ficar editando imagem por imagem do seu site.&lt;/p&gt;


&lt;h3&gt;Então "Comofas"?&lt;/h3&gt;
&lt;p&gt;Com o &lt;strong&gt;CSS3&lt;/strong&gt;, conseguir esse efeito é &lt;em&gt;moleza&lt;/em&gt;, basta utilizar a propriedades &lt;strong&gt;border-radius&lt;/strong&gt;. Essa propriedade recebe como valor uma porcentagem ou uma medida em pixels, que determina quanto a borda do elemento deverá ser arredondada.&lt;/p&gt;
&lt;h3&gt;De Quadrado para Circulo&lt;/h3&gt;
&lt;p&gt;Transformar uma imagem quadrada em uma imagem redonda é muito simples, basta determinar sua propriedade &lt;em&gt;border-radius&lt;/em&gt; com 50%.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;.avatar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora, qualquer elemento html (de preferencia quadrado) que seja da classe &lt;strong&gt;avatar&lt;/strong&gt;, será transformado em um circulo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;avatar&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;img/photo.jpg&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja o resultado com uma imagem aleatória&lt;/p&gt;
&lt;iframe width="100%" height="300" src="http://jsfiddle.net/drgarcia1986/62yPB/9/embedded/result,html,css" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;

&lt;h3&gt;Arredondando cantos&lt;/h3&gt;
&lt;p&gt;Se a sua intenção não for criar circulos, você pode diminuir a porcentagem do raio (radius) ou trabalhar com pixels. Você pode também arredondar somente cantos específicos de um elemento. Assim como a grande maioria das propriedades do CSS, a propriedade &lt;em&gt;border-radius&lt;/em&gt; consiste em um conjunto de popriedades especificas para cada canto de um elemento, como por exemplo a propriedade &lt;strong&gt;border-top-left-radius&lt;/strong&gt;.
Para arredondar somente os cantos inferiores de um elemento, podemos fazer da seguinte forma.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;.inferior&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ou assim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;.inferior&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja esse exemplo com a mesma imagem aleatória anterior&lt;/p&gt;
&lt;iframe width="100%" height="300" src="http://jsfiddle.net/drgarcia1986/Jjy5K/4/embedded/result,html,css" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;

&lt;h3&gt;É Cross-Browser?&lt;/h3&gt;
&lt;p&gt;Realizei testes tanto com o Firefox (gecko) como com Chrome (webkit) e não tive problemas, o IE 9 (trident) também já está compativel, mas por garantia e compatibilidade com versões antigas de outros browsers, você pode usar as propriedades especificas de cada motor de renderização&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;.seletor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Referências&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/pt-br/library/gg589503%28v=vs.85%29.aspx"&gt;Cantos arredondados no IE 9&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://css-tricks.com/almanac/properties/b/border-radius/"&gt;border-radius - CSS Tricks&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</summary><category term="css"></category><category term="front-end"></category><category term="html"></category></entry><entry><title>String Format no JavaScript</title><link href="http://www.diego-garcia.info/2014/11/20/String-Format-No-Javascript/" rel="alternate"></link><published>2014-11-20T00:00:00-02:00</published><author><name>Diego Garcia</name></author><id>tag:www.diego-garcia.info,2014-11-20:2014/11/20/String-Format-No-Javascript/</id><summary type="html">&lt;p&gt;Nessa minha recente aproximação com o &lt;strong&gt;JavaScript&lt;/strong&gt;, a primeira coisa que senti falta foi de um método do tipo &lt;em&gt;Format&lt;/em&gt; para trabalhar com strings.&lt;/p&gt;


&lt;h3&gt;Decepção&lt;/h3&gt;
&lt;p&gt;Confesso que foi uma triste surpresa saber que nativamente o JavaScript não possui um método para essa finalidade. Nesse momento me imaginei fazendo esse tipo de concatenação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;texto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Olá &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, seja bem vindo ao site &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;site&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\nVocê é realmente &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Esperança&lt;/h3&gt;
&lt;p&gt;Da mesma forma que fui surpreendido negativamente, também tive uma ótima surpresa ao descobrir que o JavaScript permite &lt;em&gt;tunar&lt;/em&gt; seus objetos, incluido novas propriedades e novos métodos, graças a propriedade &lt;strong&gt;prototype&lt;/strong&gt;. Com isso o céu é o limite.&lt;/p&gt;
&lt;h3&gt;Solução&lt;/h3&gt;
&lt;p&gt;O seguinte código cria um método chamado &lt;strong&gt;format&lt;/strong&gt; no prototype dos objetos &lt;strong&gt;Strings&lt;/strong&gt;, tornando esse método disponível para qualquer string do código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;formatted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;regexp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\\{&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;formatted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formatted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;formatted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ao colocar esse código no ~~head do html na tag script~~ início do seu arquivo &lt;em&gt;JS&lt;/em&gt;, você será capaz de montar o texto do primeiro exemplo da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;texto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Olá {0}, seja bem vindo ao site {1}\nVocê é realmente {0}?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com certeza mais elegante e mais aderente a outras linguagens, como por exemplo o Python.&lt;/p&gt;
&lt;h3&gt;Explicação&lt;/h3&gt;
&lt;p&gt;Neste código mágico primeiro verificamos se a propriedade &lt;em&gt;format&lt;/em&gt; do prototype de String está nula, caso esteja, atribuimos a ela um método que basicamente recupera o valor do objeto com o &lt;strong&gt;this&lt;/strong&gt; (no caso, o conteúdo da string) e executa um for em cada argumento passado para esse método, esse &lt;em&gt;for&lt;/em&gt; substitui todas as ocorrências de &lt;em&gt;{N}&lt;/em&gt;, pelo valor do argumento em seu determinado índice. Por exemplo, o resultado deste código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Seja bem vindo {1}, {0}.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Diego&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Garcia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Será:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Seja bem vindo Garcia, Diego.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Possibilidade&lt;/h3&gt;
&lt;p&gt;As possibilidades com o uso do prototype são infinitas, comparando a outras linguagens, o prototype nos permite criar &lt;strong&gt;class helpers&lt;/strong&gt; em JavaScript, o que por si só, já é incrivel.&lt;/p&gt;
&lt;h4&gt;Referências&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.w3schools.com/jsref/jsref_prototype_string.asp"&gt;Prototype String - W3Schools&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format"&gt;JavaScript equivalent to Printf -  StackOverFlow&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.codeproject.com/Tips/59262/JavaScript-date-helper-class"&gt;Date Helper - CodeProject&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</summary><category term="prototype"></category><category term="javascript"></category></entry></feed>